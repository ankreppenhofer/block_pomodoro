Index: amd/build/pomodoro_timer.min.js
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>define(\"block_pomodoro/pomodoro_timer\",[\"core/ajax\",\"core/notification\"],(function(Ajax,Notification){let cfg=null,K=null,channel=null,intervalId=null;function clearTick(){null!==intervalId&&(clearInterval(intervalId),intervalId=null)}function alarm(){let kind=arguments.length>0&&void 0!==arguments[0]?arguments[0]:\"\";try{var soundUrl;soundUrl=\"click\"===kind?M.cfg.wwwroot+\"/blocks/pomodoro/sounds/press.mp3\":M.cfg.wwwroot+\"/blocks/pomodoro/sounds/alert.mp3\";var audio=new Audio(soundUrl);audio.play()}catch(e){window.navigator&&window.navigator.vibrate&&window.navigator.vibrate(200)}}function $(id){return document.getElementById(id)}function now(){return Date.now()}function readInt(v,d){const n=parseInt(null!=v?v:\"\",10);return Number.isFinite(n)?n:d}function formatTime(ms){const s=Math.max(0,Math.floor(ms/1e3)),m=Math.floor(s/60).toString().padStart(2,\"0\"),r=(s%60).toString().padStart(2,\"0\");return\"\".concat(m,\":\").concat(r)}function getTimerElement(){return $(\"pomodoro-timer-display\")}function renderTomatoes(el,sessionscount,interval){if(!el)return;const n=Math.max(0,Number(sessionscount)||0),m=Math.max(1,Number(interval)||0),filled=n%m==0&&0!==n?m:n%m;el.innerHTML=Array.from({length:m},((_,i)=>'<span class=\"tomato '.concat(i<filled?\"filled\":\"\",'\" aria-hidden=\"true\"></span>'))).join(\"\")}function openDialog(d){d&&\"function\"==typeof d.showModal&&d.showModal()}function closeDialog(d){d&&d.open&&d.close()}function startTimer(endTs,el,onDone){if(!el||!Number.isFinite(endTs))return;if(endTs<=now())return localStorage.removeItem(K.END),void localStorage.setItem(K.RUNNING,\"0\");clearTick();const tick=()=>{const left=endTs-now();if(left<=0)return clearTick(),el.textContent=\"00:00\",localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,\"0\"),sendMessage({type:\"stop\"}),void(onDone&&onDone());el.textContent=formatTime(left)};tick(),intervalId=setInterval(tick,1e3)}function stopAndReset(el){let triggerAlarm=arguments.length>1&&void 0!==arguments[1]&&arguments[1];clearTick(),localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,\"0\"),sendMessage({type:\"stop\"}),el&&(el.textContent=formatTime(cfg.focusMs)),triggerAlarm&&alarm()}function startPausePomodoro(onAfter){if(!cfg)return;const display=getTimerElement();if(!display)return;const remainRaw=localStorage.getItem(K.REMAINING),running=\"1\"===localStorage.getItem(K.RUNNING),endRaw=localStorage.getItem(K.END);if(null===remainRaw)if(running){if(null!==endRaw){const left=Number(endRaw)-now();left>0&&(localStorage.setItem(K.REMAINING,String(left)),sendMessage({type:\"pause\",remaining:left}),display&&(display.textContent=formatTime(left)))}clearTick(),localStorage.setItem(K.RUNNING,\"0\")}else!function(onAfter){setPhase(\"wellness\");const modal=$(\"wellness-modal\"),countdown=$(\"wellness-countdown\");if(!cfg)return;if(!modal||!countdown)return void onAfter();const end=now()+1e3*cfg.wellnessSec;openDialog(modal),startTimer(end,countdown,(()=>{closeDialog(modal),onAfter()}));const skip=$(\"skip-wellness\");skip&&(skip.type=\"button\",skip.onclick=e=>{e.preventDefault(),e.stopPropagation(),closeDialog(modal),onAfter()})}(onAfter);else{const remain=Number(remainRaw);Number.isFinite(remain)&&remain>0&&(localStorage.removeItem(K.REMAINING),startFocus(display,remain))}}function startFocus(el,ms){if(!cfg)return;const focusDur=Number.isFinite(ms)&&ms>0?ms:15e5;setPhase(\"focus\");const starttsSec=Math.floor(now()/1e3),end=now()+focusDur;localStorage.setItem(K.END,String(end)),localStorage.setItem(K.RUNNING,\"1\"),sendMessage({type:\"start\",end:end}),startTimer(end,el,(()=>{ajax(\"block_pomodoro_increment_session\",{courseid:cfg.courseid,startts:starttsSec}).then((res=>{alarm();const count=res&&\"number\"==typeof res.sessionscount?res.sessionscount:1;renderTomatoes($(\"pomodoro-tomatoes\"),count,cfg.longbreakInterval);const isLong=(c=count,(i=cfg.longbreakInterval)>0&&c>0&&c%i==0);var c,i;return function(el,ms,kind){setPhase(\"break\",kind);const dlg=$(\"break-modal\"),cd=$(\"break-countdown\");cd&&(cd.textContent=formatTime(ms)),openDialog(dlg),startTimer(now()+ms,cd||el,(()=>{alarm(\"focus\"),closeDialog(dlg),stopAndReset(el,!1)}));const ok=$(\"dismiss-break\");ok&&(ok.type=\"button\",ok.onclick=e=>{e.preventDefault(),e.stopPropagation(),closeDialog(dlg)})}(el,isLong?cfg.longbreakMs:cfg.shortbreakMs,isLong?\"long\":\"short\"),null})).catch(Notification.exception)}))}function setPhase(p,k){localStorage.setItem(K.PHASE,p),k?localStorage.setItem(K.BREAKKIND,k):localStorage.removeItem(K.BREAKKIND)}function sendMessage(msg){channel?channel.postMessage(msg):(localStorage.setItem(K.MSG,JSON.stringify(Object.assign({},msg,{t:now()}))),setTimeout((function(){localStorage.removeItem(K.MSG)}),50))}function handleMessage(msg,el){if(msg)return\"start\"===msg.type&&msg.end?(startTimer(Number(msg.end),el),localStorage.setItem(K.END,String(msg.end)),void localStorage.setItem(K.RUNNING,\"1\")):\"pause\"===msg.type&&void 0!==msg.remaining?(clearTick(),localStorage.setItem(K.REMAINING,String(msg.remaining)),localStorage.setItem(K.RUNNING,\"0\"),void(el&&(el.textContent=formatTime(msg.remaining)))):void(\"stop\"===msg.type&&localStorage.getItem(K.END)&&stopAndReset(el,!1))}function ajax(name,args){return Ajax.call([{methodname:name,args:args}])[0].catch(Notification.exception)}return{init(){const display=getTimerElement();if(!display)return;cfg=function(timerDisplay){const courseid=readInt(timerDisplay.getAttribute(\"data-courseid\"),0),wellnessSec=readInt(timerDisplay.getAttribute(\"data-wellness-sec\"),30);let focusMs;const focusSec=readInt(timerDisplay.getAttribute(\"data-focus-sec\"),NaN);if(Number.isFinite(focusSec))focusMs=1e3*focusSec;else{let focusMin=readInt(timerDisplay.getAttribute(\"data-focus-min\"),NaN);Number.isFinite(focusMin)||(focusMin=readInt((timerDisplay.getAttribute(\"data-duration\")||\"25:00\").split(\":\")[0]||\"25\",25)),focusMs=60*focusMin*1e3}let shortbreakMs,longbreakMs;const sbSec=readInt(timerDisplay.getAttribute(\"data-shortbreak-sec\"),NaN),lbSec=readInt(timerDisplay.getAttribute(\"data-longbreak-sec\"),NaN);return Number.isFinite(sbSec)&&(shortbreakMs=1e3*sbSec),Number.isFinite(lbSec)&&(longbreakMs=1e3*lbSec),Number.isFinite(shortbreakMs)||(shortbreakMs=60*readInt(timerDisplay.getAttribute(\"data-shortbreak-min\"),5)*1e3),Number.isFinite(longbreakMs)||(longbreakMs=60*readInt(timerDisplay.getAttribute(\"data-longbreak-min\"),15)*1e3),{courseid:courseid,wellnessSec:wellnessSec,focusMs:focusMs,shortbreakMs:shortbreakMs,longbreakMs:longbreakMs,longbreakInterval:readInt(timerDisplay.getAttribute(\"data-longbreak-interval\"),3)}}(display),K=function(courseid){const cid=Number.isFinite(courseid)&&courseid>0?courseid:\"global\",p=\"pomodoro:\".concat(cid);return{END:\"\".concat(p,\":endTimestamp\"),RUNNING:\"\".concat(p,\":running\"),PHASE:\"\".concat(p,\":phase\"),BREAKKIND:\"\".concat(p,\":breakKind\"),MSG:\"\".concat(p,\":msg\"),CHANNEL:\"\".concat(p,\":channel\")}}(cfg.courseid);const intervalEl=$(\"pomodoro-interval\");intervalEl&&(intervalEl.textContent=String(cfg.longbreakInterval)),\"undefined\"!=typeof BroadcastChannel&&(channel=new BroadcastChannel(K.CHANNEL),channel.onmessage=e=>handleMessage(e.data,display)),ajax(\"block_pomodoro_get_status\",{courseid:cfg.courseid}).then((res=>{const count=res&&\"number\"==typeof res.sessionscount?res.sessionscount:0;return renderTomatoes($(\"pomodoro-tomatoes\"),count,cfg.longbreakInterval),null})).catch(Notification.exception);const existingRaw=localStorage.getItem(K.END);if(null!==existingRaw){const existing=Number(existingRaw),phase=localStorage.getItem(K.PHASE)||\"\";let target;target=\"wellness\"===phase?$(\"wellness-countdown\"):\"break\"===phase?$(\"break-countdown\"):display,Number.isFinite(existing)&&existing>now()+250?(\"break\"===phase&&openDialog($(\"break-modal\")),\"wellness\"===phase&&openDialog($(\"wellness-modal\")),startTimer(existing,target||display)):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,\"0\"))}window.addEventListener(\"storage\",(e=>{if(e.key!==K.END){if(e.key===K.MSG&&e.newValue)try{handleMessage(JSON.parse(e.newValue),display)}catch(err){window&&window.console&&\"function\"==typeof window.console.debug&&window.console.debug(\"Pomodoro: storage MSG parse ignored\",err)}}else if(null!==e.newValue){const val=Number(e.newValue);Number.isFinite(val)&&val>now()+250?startTimer(val,display):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,\"0\"))}else localStorage.setItem(K.RUNNING,\"0\")}));const startBtn=$(\"start\");startBtn&&(startBtn.type=\"button\",startBtn.onclick=e=>{alarm(\"click\"),e.preventDefault(),e.stopPropagation(),startPausePomodoro((()=>startFocus(display,cfg.focusMs)))});const stopBtn=$(\"stop\");stopBtn&&(stopBtn.type=\"button\",stopBtn.onclick=e=>{alarm(\"click\"),e.preventDefault(),e.stopPropagation(),stopAndReset(display,!1)}),window.addEventListener(\"beforeunload\",(()=>{channel&&channel.close()}))}}}));\n\n//# sourceMappingURL=pomodoro_timer.min.js.map
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/amd/build/pomodoro_timer.min.js b/amd/build/pomodoro_timer.min.js
--- a/amd/build/pomodoro_timer.min.js	(revision dbcc9894c4480077f36399cdd8f10f754d10535e)
+++ b/amd/build/pomodoro_timer.min.js	(date 1756904733080)
@@ -1,3 +1,3 @@
-define("block_pomodoro/pomodoro_timer",["core/ajax","core/notification"],(function(Ajax,Notification){let cfg=null,K=null,channel=null,intervalId=null;function clearTick(){null!==intervalId&&(clearInterval(intervalId),intervalId=null)}function alarm(){let kind=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";try{var soundUrl;soundUrl="click"===kind?M.cfg.wwwroot+"/blocks/pomodoro/sounds/press.mp3":M.cfg.wwwroot+"/blocks/pomodoro/sounds/alert.mp3";var audio=new Audio(soundUrl);audio.play()}catch(e){window.navigator&&window.navigator.vibrate&&window.navigator.vibrate(200)}}function $(id){return document.getElementById(id)}function now(){return Date.now()}function readInt(v,d){const n=parseInt(null!=v?v:"",10);return Number.isFinite(n)?n:d}function formatTime(ms){const s=Math.max(0,Math.floor(ms/1e3)),m=Math.floor(s/60).toString().padStart(2,"0"),r=(s%60).toString().padStart(2,"0");return"".concat(m,":").concat(r)}function getTimerElement(){return $("pomodoro-timer-display")}function renderTomatoes(el,sessionscount,interval){if(!el)return;const n=Math.max(0,Number(sessionscount)||0),m=Math.max(1,Number(interval)||0),filled=n%m==0&&0!==n?m:n%m;el.innerHTML=Array.from({length:m},((_,i)=>'<span class="tomato '.concat(i<filled?"filled":"",'" aria-hidden="true"></span>'))).join("")}function openDialog(d){d&&"function"==typeof d.showModal&&d.showModal()}function closeDialog(d){d&&d.open&&d.close()}function startTimer(endTs,el,onDone){if(!el||!Number.isFinite(endTs))return;if(endTs<=now())return localStorage.removeItem(K.END),void localStorage.setItem(K.RUNNING,"0");clearTick();const tick=()=>{const left=endTs-now();if(left<=0)return clearTick(),el.textContent="00:00",localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"),sendMessage({type:"stop"}),void(onDone&&onDone());el.textContent=formatTime(left)};tick(),intervalId=setInterval(tick,1e3)}function stopAndReset(el){let triggerAlarm=arguments.length>1&&void 0!==arguments[1]&&arguments[1];clearTick(),localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"),sendMessage({type:"stop"}),el&&(el.textContent=formatTime(cfg.focusMs)),triggerAlarm&&alarm()}function startPausePomodoro(onAfter){if(!cfg)return;const display=getTimerElement();if(!display)return;const remainRaw=localStorage.getItem(K.REMAINING),running="1"===localStorage.getItem(K.RUNNING),endRaw=localStorage.getItem(K.END);if(null===remainRaw)if(running){if(null!==endRaw){const left=Number(endRaw)-now();left>0&&(localStorage.setItem(K.REMAINING,String(left)),sendMessage({type:"pause",remaining:left}),display&&(display.textContent=formatTime(left)))}clearTick(),localStorage.setItem(K.RUNNING,"0")}else!function(onAfter){setPhase("wellness");const modal=$("wellness-modal"),countdown=$("wellness-countdown");if(!cfg)return;if(!modal||!countdown)return void onAfter();const end=now()+1e3*cfg.wellnessSec;openDialog(modal),startTimer(end,countdown,(()=>{closeDialog(modal),onAfter()}));const skip=$("skip-wellness");skip&&(skip.type="button",skip.onclick=e=>{e.preventDefault(),e.stopPropagation(),closeDialog(modal),onAfter()})}(onAfter);else{const remain=Number(remainRaw);Number.isFinite(remain)&&remain>0&&(localStorage.removeItem(K.REMAINING),startFocus(display,remain))}}function startFocus(el,ms){if(!cfg)return;const focusDur=Number.isFinite(ms)&&ms>0?ms:15e5;setPhase("focus");const starttsSec=Math.floor(now()/1e3),end=now()+focusDur;localStorage.setItem(K.END,String(end)),localStorage.setItem(K.RUNNING,"1"),sendMessage({type:"start",end:end}),startTimer(end,el,(()=>{ajax("block_pomodoro_increment_session",{courseid:cfg.courseid,startts:starttsSec}).then((res=>{alarm();const count=res&&"number"==typeof res.sessionscount?res.sessionscount:1;renderTomatoes($("pomodoro-tomatoes"),count,cfg.longbreakInterval);const isLong=(c=count,(i=cfg.longbreakInterval)>0&&c>0&&c%i==0);var c,i;return function(el,ms,kind){setPhase("break",kind);const dlg=$("break-modal"),cd=$("break-countdown");cd&&(cd.textContent=formatTime(ms)),openDialog(dlg),startTimer(now()+ms,cd||el,(()=>{alarm("focus"),closeDialog(dlg),stopAndReset(el,!1)}));const ok=$("dismiss-break");ok&&(ok.type="button",ok.onclick=e=>{e.preventDefault(),e.stopPropagation(),closeDialog(dlg)})}(el,isLong?cfg.longbreakMs:cfg.shortbreakMs,isLong?"long":"short"),null})).catch(Notification.exception)}))}function setPhase(p,k){localStorage.setItem(K.PHASE,p),k?localStorage.setItem(K.BREAKKIND,k):localStorage.removeItem(K.BREAKKIND)}function sendMessage(msg){channel?channel.postMessage(msg):(localStorage.setItem(K.MSG,JSON.stringify(Object.assign({},msg,{t:now()}))),setTimeout((function(){localStorage.removeItem(K.MSG)}),50))}function handleMessage(msg,el){if(msg)return"start"===msg.type&&msg.end?(startTimer(Number(msg.end),el),localStorage.setItem(K.END,String(msg.end)),void localStorage.setItem(K.RUNNING,"1")):"pause"===msg.type&&void 0!==msg.remaining?(clearTick(),localStorage.setItem(K.REMAINING,String(msg.remaining)),localStorage.setItem(K.RUNNING,"0"),void(el&&(el.textContent=formatTime(msg.remaining)))):void("stop"===msg.type&&localStorage.getItem(K.END)&&stopAndReset(el,!1))}function ajax(name,args){return Ajax.call([{methodname:name,args:args}])[0].catch(Notification.exception)}return{init(){const display=getTimerElement();if(!display)return;cfg=function(timerDisplay){const courseid=readInt(timerDisplay.getAttribute("data-courseid"),0),wellnessSec=readInt(timerDisplay.getAttribute("data-wellness-sec"),30);let focusMs;const focusSec=readInt(timerDisplay.getAttribute("data-focus-sec"),NaN);if(Number.isFinite(focusSec))focusMs=1e3*focusSec;else{let focusMin=readInt(timerDisplay.getAttribute("data-focus-min"),NaN);Number.isFinite(focusMin)||(focusMin=readInt((timerDisplay.getAttribute("data-duration")||"25:00").split(":")[0]||"25",25)),focusMs=60*focusMin*1e3}let shortbreakMs,longbreakMs;const sbSec=readInt(timerDisplay.getAttribute("data-shortbreak-sec"),NaN),lbSec=readInt(timerDisplay.getAttribute("data-longbreak-sec"),NaN);return Number.isFinite(sbSec)&&(shortbreakMs=1e3*sbSec),Number.isFinite(lbSec)&&(longbreakMs=1e3*lbSec),Number.isFinite(shortbreakMs)||(shortbreakMs=60*readInt(timerDisplay.getAttribute("data-shortbreak-min"),5)*1e3),Number.isFinite(longbreakMs)||(longbreakMs=60*readInt(timerDisplay.getAttribute("data-longbreak-min"),15)*1e3),{courseid:courseid,wellnessSec:wellnessSec,focusMs:focusMs,shortbreakMs:shortbreakMs,longbreakMs:longbreakMs,longbreakInterval:readInt(timerDisplay.getAttribute("data-longbreak-interval"),3)}}(display),K=function(courseid){const cid=Number.isFinite(courseid)&&courseid>0?courseid:"global",p="pomodoro:".concat(cid);return{END:"".concat(p,":endTimestamp"),RUNNING:"".concat(p,":running"),PHASE:"".concat(p,":phase"),BREAKKIND:"".concat(p,":breakKind"),MSG:"".concat(p,":msg"),CHANNEL:"".concat(p,":channel")}}(cfg.courseid);const intervalEl=$("pomodoro-interval");intervalEl&&(intervalEl.textContent=String(cfg.longbreakInterval)),"undefined"!=typeof BroadcastChannel&&(channel=new BroadcastChannel(K.CHANNEL),channel.onmessage=e=>handleMessage(e.data,display)),ajax("block_pomodoro_get_status",{courseid:cfg.courseid}).then((res=>{const count=res&&"number"==typeof res.sessionscount?res.sessionscount:0;return renderTomatoes($("pomodoro-tomatoes"),count,cfg.longbreakInterval),null})).catch(Notification.exception);const existingRaw=localStorage.getItem(K.END);if(null!==existingRaw){const existing=Number(existingRaw),phase=localStorage.getItem(K.PHASE)||"";let target;target="wellness"===phase?$("wellness-countdown"):"break"===phase?$("break-countdown"):display,Number.isFinite(existing)&&existing>now()+250?("break"===phase&&openDialog($("break-modal")),"wellness"===phase&&openDialog($("wellness-modal")),startTimer(existing,target||display)):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"))}window.addEventListener("storage",(e=>{if(e.key!==K.END){if(e.key===K.MSG&&e.newValue)try{handleMessage(JSON.parse(e.newValue),display)}catch(err){window&&window.console&&"function"==typeof window.console.debug&&window.console.debug("Pomodoro: storage MSG parse ignored",err)}}else if(null!==e.newValue){const val=Number(e.newValue);Number.isFinite(val)&&val>now()+250?startTimer(val,display):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"))}else localStorage.setItem(K.RUNNING,"0")}));const startBtn=$("start");startBtn&&(startBtn.type="button",startBtn.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),startPausePomodoro((()=>startFocus(display,cfg.focusMs)))});const stopBtn=$("stop");stopBtn&&(stopBtn.type="button",stopBtn.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),stopAndReset(display,!1)}),window.addEventListener("beforeunload",(()=>{channel&&channel.close()}))}}}));
+define("block_pomodoro/pomodoro_timer",["core/ajax","core/notification"],function(Ajax,Notification){let cfg=null,K=null,channel=null,intervalId=null;function clearTick(){null!==intervalId&&(clearInterval(intervalId),intervalId=null)}function alarm(){let kind=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"";try{var soundUrl;soundUrl="click"===kind?M.cfg.wwwroot+"/blocks/pomodoro/sounds/press.mp3":M.cfg.wwwroot+"/blocks/pomodoro/sounds/alert.mp3",new Audio(soundUrl).play()}catch(e){window.navigator&&window.navigator.vibrate&&window.navigator.vibrate(200)}}function $(id){return document.getElementById(id)}function now(){return Date.now()}function readInt(v,d){const n=parseInt(v??"",10);return Number.isFinite(n)?n:d}function formatTime(ms){const s=Math.max(0,Math.floor(ms/1e3));return`${Math.floor(s/60).toString().padStart(2,"0")}:${(s%60).toString().padStart(2,"0")}`}function getTimerElement(){return $("pomodoro-timer-display")}function renderTomatoes(el,sessionscount,interval){if(!el)return;const n=Math.max(0,Number(sessionscount)||0),m=Math.max(1,Number(interval)||0),filled=n%m===0&&0!==n?m:n%m;el.innerHTML=Array.from({length:m},(_,i)=>`<span class="tomato ${i<filled?"filled":""}" aria-hidden="true"></span>`).join("")}function openDialog(d){d&&"function"==typeof d.showModal&&d.showModal()}function closeDialog(d){d&&d.open&&d.close()}function startTimer(endTs,el,onDone){if(!el||!Number.isFinite(endTs))return;if(endTs<=now())return localStorage.removeItem(K.END),void localStorage.setItem(K.RUNNING,"0");clearTick();const tick=()=>{const left=endTs-now();if(left<=0)return clearTick(),el.textContent="00:00",localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"),sendMessage({type:"stop"}),void(onDone&&onDone());el.textContent=formatTime(left)};tick(),intervalId=setInterval(tick,1e3)}function stopAndReset(el){let triggerAlarm=arguments.length>1&&void 0!==arguments[1]&&arguments[1];clearTick(),localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"),sendMessage({type:"stop"}),el&&(el.textContent=formatTime(cfg.focusMs)),triggerAlarm&&alarm()}function startPausePomodoro(onAfter){if(!cfg)return;const display=getTimerElement();if(!display)return;const remainRaw=localStorage.getItem(K.REMAINING),running="1"===localStorage.getItem(K.RUNNING),endRaw=localStorage.getItem(K.END);if(null!==remainRaw){const remain=Number(remainRaw);return void(Number.isFinite(remain)&&remain>0&&(localStorage.removeItem(K.REMAINING),startFocus(display,remain)))}if(running){if(null!==endRaw){const left=Number(endRaw)-now();left>0&&(localStorage.setItem(K.REMAINING,String(left)),sendMessage({type:"pause",remaining:left}),display&&(display.textContent=formatTime(left)))}clearTick(),localStorage.setItem(K.RUNNING,"0")}else!function(onAfter){setPhase("wellness");const modal=$("wellness-modal"),countdown=$("wellness-countdown");if(!cfg)return;if(!modal||!countdown)return void onAfter();const end=now()+1e3*cfg.wellnessSec;openDialog(modal),startTimer(end,countdown,()=>{closeDialog(modal),onAfter()});const skip=$("skip-wellness");skip&&(skip.type="button",skip.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),closeDialog(modal),onAfter()})}(onAfter)}function startFocus(el,ms){if(!cfg)return;const focusDur=Number.isFinite(ms)&&ms>0?ms:15e5;setPhase("focus");const starttsSec=Math.floor(now()/1e3),end=now()+focusDur;localStorage.setItem(K.END,String(end)),localStorage.setItem(K.RUNNING,"1"),sendMessage({type:"start",end:end}),startTimer(end,el,()=>{ajax("block_pomodoro_increment_session",{courseid:cfg.courseid,startts:starttsSec}).then(res=>{alarm();const count=res&&"number"==typeof res.sessionscount?res.sessionscount:1;renderTomatoes($("pomodoro-tomatoes"),count,cfg.longbreakInterval);const isLong=(c=count,(i=cfg.longbreakInterval)>0&&c>0&&c%i===0);var c,i;return function(el,ms,kind){setPhase("break",kind);const dlg=$("break-modal"),cd=$("break-countdown");cd&&(cd.textContent=formatTime(ms)),openDialog(dlg),startTimer(now()+ms,cd||el,()=>{alarm("focus"),closeDialog(dlg),stopAndReset(el,!1)});const ok=$("dismiss-break");ok&&(ok.type="button",ok.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),closeDialog(dlg)})}(el,isLong?cfg.longbreakMs:cfg.shortbreakMs,isLong?"long":"short"),null}).catch(Notification.exception)})}function setPhase(p,k){localStorage.setItem(K.PHASE,p),k?localStorage.setItem(K.BREAKKIND,k):localStorage.removeItem(K.BREAKKIND)}function sendMessage(msg){channel?channel.postMessage(msg):(localStorage.setItem(K.MSG,JSON.stringify(Object.assign({},msg,{t:now()}))),setTimeout(function(){localStorage.removeItem(K.MSG)},50))}function handleMessage(msg,el){if(msg)return"start"===msg.type&&msg.end?(startTimer(Number(msg.end),el),localStorage.setItem(K.END,String(msg.end)),void localStorage.setItem(K.RUNNING,"1")):"pause"===msg.type&&void 0!==msg.remaining?(clearTick(),localStorage.setItem(K.REMAINING,String(msg.remaining)),localStorage.setItem(K.RUNNING,"0"),void(el&&(el.textContent=formatTime(msg.remaining)))):void("stop"===msg.type&&localStorage.getItem(K.END)&&stopAndReset(el,!1))}function ajax(name,args){return Ajax.call([{methodname:name,args:args}])[0].catch(Notification.exception)}return{init(){const display=getTimerElement();if(!display)return;cfg=function(timerDisplay){const courseid=readInt(timerDisplay.getAttribute("data-courseid"),0),wellnessSec=readInt(timerDisplay.getAttribute("data-wellness-sec"),30);let focusMs;const focusSec=readInt(timerDisplay.getAttribute("data-focus-sec"),NaN);if(Number.isFinite(focusSec))focusMs=1e3*focusSec;else{let focusMin=readInt(timerDisplay.getAttribute("data-focus-min"),NaN);Number.isFinite(focusMin)||(focusMin=readInt((timerDisplay.getAttribute("data-duration")||"25:00").split(":")[0]||"25",25)),focusMs=60*focusMin*1e3}let shortbreakMs,longbreakMs;const sbSec=readInt(timerDisplay.getAttribute("data-shortbreak-sec"),NaN),lbSec=readInt(timerDisplay.getAttribute("data-longbreak-sec"),NaN);return Number.isFinite(sbSec)&&(shortbreakMs=1e3*sbSec),Number.isFinite(lbSec)&&(longbreakMs=1e3*lbSec),Number.isFinite(shortbreakMs)||(shortbreakMs=60*readInt(timerDisplay.getAttribute("data-shortbreak-min"),5)*1e3),Number.isFinite(longbreakMs)||(longbreakMs=60*readInt(timerDisplay.getAttribute("data-longbreak-min"),15)*1e3),{courseid:courseid,wellnessSec:wellnessSec,focusMs:focusMs,shortbreakMs:shortbreakMs,longbreakMs:longbreakMs,longbreakInterval:readInt(timerDisplay.getAttribute("data-longbreak-interval"),3)}}(display),K=function(courseid){const p=`pomodoro:${Number.isFinite(courseid)&&courseid>0?courseid:"global"}`;return{END:`${p}:endTimestamp`,RUNNING:`${p}:running`,PHASE:`${p}:phase`,BREAKKIND:`${p}:breakKind`,MSG:`${p}:msg`,CHANNEL:`${p}:channel`}}(cfg.courseid);const intervalEl=$("pomodoro-interval");intervalEl&&(intervalEl.textContent=String(cfg.longbreakInterval)),"undefined"!=typeof BroadcastChannel&&(channel=new BroadcastChannel(K.CHANNEL),channel.onmessage=e=>handleMessage(e.data,display)),ajax("block_pomodoro_get_status",{courseid:cfg.courseid}).then(res=>{const count=res&&"number"==typeof res.sessionscount?res.sessionscount:0;return renderTomatoes($("pomodoro-tomatoes"),count,cfg.longbreakInterval),null}).catch(Notification.exception);const existingRaw=localStorage.getItem(K.END);if(null!==existingRaw){const existing=Number(existingRaw),phase=localStorage.getItem(K.PHASE)||"";let target;target="wellness"===phase?$("wellness-countdown"):"break"===phase?$("break-countdown"):display,Number.isFinite(existing)&&existing>now()+250?("break"===phase&&openDialog($("break-modal")),"wellness"===phase&&openDialog($("wellness-modal")),startTimer(existing,target||display)):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"))}window.addEventListener("storage",e=>{if(e.key!==K.END){if(e.key===K.MSG&&e.newValue)try{handleMessage(JSON.parse(e.newValue),display)}catch(err){window&&window.console&&"function"==typeof window.console.debug&&window.console.debug("Pomodoro: storage MSG parse ignored",err)}}else if(null!==e.newValue){const val=Number(e.newValue);Number.isFinite(val)&&val>now()+250?startTimer(val,display):(localStorage.removeItem(K.END),localStorage.setItem(K.RUNNING,"0"))}else localStorage.setItem(K.RUNNING,"0")});const startBtn=$("start");startBtn&&(startBtn.type="button",startBtn.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),startPausePomodoro(()=>startFocus(display,cfg.focusMs))});const stopBtn=$("stop");stopBtn&&(stopBtn.type="button",stopBtn.onclick=e=>{alarm("click"),e.preventDefault(),e.stopPropagation(),stopAndReset(display,!1)}),window.addEventListener("beforeunload",()=>{channel&&channel.close()})}}});
 
 //# sourceMappingURL=pomodoro_timer.min.js.map
\ No newline at end of file
Index: amd/build/pomodoro_timer.min.js.map
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\"version\":3,\"file\":\"pomodoro_timer.min.js\",\"sources\":[\"../src/pomodoro_timer.js\"],\"sourcesContent\":[\"/**\\n * Pomodoro Timer (AMD) — scoped by course, increments only when focus ends.\\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\\n *     block_pomodoro_get_status(courseid:int)\\n */\\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\\n    'use strict';\\n\\n    // ---------------------------------------------------------------------\\n    // Module-level shared mutable state (per page load)\\n    // ---------------------------------------------------------------------\\n    /**\\n     * @typedef {Object} Config\\n     * @property {number} courseid\\n     * @property {number} wellnessSec\\n     * @property {number} focusMs\\n     * @property {number} shortbreakMs\\n     * @property {number} longbreakMs\\n     * @property {number} longbreakInterval\\n     */\\n    /** @type {null|Config} */\\n    let cfg = null; // Set in init().\\n    /**\\n     * @typedef {Object} ScopedKeys\\n     * @property {string} END End timestamp key.\\n     * @property {string} REMAINING\\n     * @property {string} RUNNING Running state key.\\n     * @property {string} PHASE\\n     * @property {string} BREAKKIND\\n     * @property {string} MSG\\n     * @property {string} CHANNEL\\n     */\\n    /** @type {null|ScopedKeys} */\\n    let K = null; // Key names (scoped localStorage) set in init().\\n    /** @type {null|BroadcastChannel} */\\n    let channel = null; // Broadcast channel instance.\\n    /** @type {null|number} */\\n    let intervalId = null; // Active countdown interval id.\\n\\n    // ---------------------------------------------------------------------\\n    // Utility helpers\\n    /**\\n     * Clears the active countdown interval, if any.\\n     */\\n    function clearTick() {\\n        if (intervalId !== null) {\\n            clearInterval(intervalId);\\n            intervalId = null;\\n        }\\n    }\\n\\n    /**\\n     * Plays an alarm sound (simple beep using Audio API).\\n     * @param {string} [kind] Type of alarm sound to play ('click' or other).\\n     */\\n    function alarm(kind = '') {\\n        try {\\n            var soundUrl;\\n            if (kind === 'click') {\\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/press.mp3';\\n            } else {\\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\\n            }\\n            // Create an Audio object\\n            var audio = new Audio(soundUrl);// Replace with actual path if needed\\n            audio.play();\\n        } catch (e) {\\n            // Fallback: browser beep\\n            if (window.navigator && window.navigator.vibrate) {\\n                window.navigator.vibrate(200);\\n            }\\n        }\\n    }\\n\\n    // ---------------------------------------------------------------------\\n    /**\\n     * Shorthand getElementById.\\n     * @param {string} id\\n     * @returns {HTMLElement|null}\\n     */\\n    function $(id) {\\n        return document.getElementById(id);\\n    }\\n\\n    /**\\n     * Now in ms.\\n     * @returns {number}\\n     */\\n    function now() {\\n        return Date.now();\\n    }\\n\\n    /**\\n     * Parse an integer with default.\\n     * @param {string|number|undefined|null} v\\n     * @param {number} d Default value\\n     * @returns {number}\\n     */\\n    function readInt(v, d) {\\n        const n = parseInt(v ?? '', 10);\\n        return Number.isFinite(n) ? n : d;\\n    }\\n\\n    /**\\n     * Format milliseconds as mm:ss.\\n     * @param {number} ms\\n     * @returns {string}\\n     */\\n    function formatTime(ms) {\\n        const s = Math.max(0, Math.floor(ms / 1000));\\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\\n        const r = (s % 60).toString().padStart(2, '0');\\n        return `${m}:${r}`;\\n    }\\n\\n    // =====================\\n    // UI Functions\\n    // =====================\\n    /**\\n     * Returns the display element for the Pomodoro timer.\\n     * @returns {HTMLElement|null}\\n     */\\n    function getTimerElement() {\\n        return $('pomodoro-timer-display');\\n    }\\n\\n    /**\\n     * Renders tomato icons for Pomodoro sessions.\\n     * @param {HTMLElement} el The container element.\\n     * @param {number} sessionscount Number of completed sessions.\\n     * @param {number} interval Number of sessions per long break.\\n     */\\n    function renderTomatoes(el, sessionscount, interval) {\\n        if (!el) {\\n            return;\\n        }\\n        const n = Math.max(0, Number(sessionscount) || 0);\\n        const m = Math.max(1, Number(interval) || 0);\\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\\n        el.innerHTML = Array.from({length: m}, (_, i) =>\\n            `<span class=\\\"tomato ${i < filled ? 'filled' : ''}\\\" aria-hidden=\\\"true\\\"></span>`\\n        ).join('');\\n    }\\n\\n    /**\\n     * Opens the dialog element.\\n     * @param {HTMLDialogElement} d The dialog element to open.\\n     */\\n    function openDialog(d) {\\n        if (d && typeof d.showModal === 'function') {\\n            d.showModal();\\n        }\\n    }\\n\\n    /**\\n     * Closes the dialog element.\\n     * @param {HTMLDialogElement} d The dialog element to open.\\n     */\\n    function closeDialog(d) {\\n        if (d && d.open) {\\n            d.close();\\n        }\\n    }\\n\\n    // =====================\\n    // Pomodoro Logic\\n    // =====================\\n    /**\\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\\n     * @param {HTMLElement} timerDisplay The timer display element.\\n     * @returns {Config}\\n     */\\n    function getConfig(timerDisplay) {\\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\\n        let focusMs;\\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\\n        if (Number.isFinite(focusSec)) {\\n            focusMs = focusSec * 1000;\\n        } else {\\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\\n            if (!Number.isFinite(focusMin)) {\\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\\n                const parts = dur.split(':');\\n                const mm = parts[0] || '25';\\n                focusMin = readInt(mm, 25);\\n            }\\n            focusMs = focusMin * 60 * 1000;\\n        }\\n        let shortbreakMs;\\n        let longbreakMs;\\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\\n        if (Number.isFinite(sbSec)) {\\n            shortbreakMs = sbSec * 1000;\\n        }\\n        if (Number.isFinite(lbSec)) {\\n            longbreakMs = lbSec * 1000;\\n        }\\n        if (!Number.isFinite(shortbreakMs)) {\\n            shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\\n        }\\n        if (!Number.isFinite(longbreakMs)) {\\n            longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\\n        }\\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\\n    }\\n\\n    /**\\n     * Determines if the next break is a long break.\\n     * @param {number} c Number of completed sessions.\\n     * @param {number} i Interval for long breaks.\\n     */\\n    function nextIsLongBreak(c, i) {\\n        return i > 0 && c > 0 && (c % i) === 0;\\n    }\\n\\n    /**\\n     * Starts the countdown timer.\\n     * @param {number} endTs Timestamp (ms) when the timer ends.\\n     * @param {HTMLElement} el Element to display the countdown.\\n     * @param {Function} onDone Callback when timer finishes.\\n     */\\n    function startTimer(endTs, el, onDone) {\\n        if (!el || !Number.isFinite(endTs)) {\\n            return;\\n        }\\n        if (endTs <= now()) {\\n            localStorage.removeItem(K.END);\\n            localStorage.setItem(K.RUNNING, '0');\\n            return;\\n        }\\n        clearTick();\\n        const tick = () => {\\n            const left = endTs - now();\\n            if (left <= 0) {\\n                clearTick();\\n                el.textContent = '00:00';\\n                localStorage.removeItem(K.END);\\n                localStorage.setItem(K.RUNNING, '0');\\n                sendMessage({type: 'stop'});\\n                if (onDone) {\\n                    onDone();\\n                }\\n                return;\\n            }\\n            el.textContent = formatTime(left);\\n        };\\n        tick();\\n        intervalId = setInterval(tick, 1000);\\n    }\\n\\n    /**\\n     * Stop the timer and reset the display.\\n     * @param {HTMLElement} el The element to update with reset time.\\n     * @param {boolean} triggerAlarm Whether to play the alarm sound.\\n     */\\n    function stopAndReset(el, triggerAlarm = false) {\\n        clearTick();\\n        localStorage.removeItem(K.END);\\n        localStorage.setItem(K.RUNNING, '0');\\n        sendMessage({type: 'stop'});\\n        if (el) {\\n            el.textContent = formatTime(cfg.focusMs);\\n        }\\n        if (triggerAlarm) {\\n            alarm();\\n        }\\n    }\\n\\n    /**\\n     * Starts or pauses the Pomodoro timer.\\n     * @param {Function} onAfter Callback to execute after starting wellness or focus.\\n     */\\n    function startPausePomodoro(onAfter) {\\n        if (!cfg) {\\n            return;\\n        }\\n        const display = getTimerElement();\\n        if (!display) {\\n            return;\\n        }\\n\\n        const remainRaw = localStorage.getItem(K.REMAINING);\\n        const running = localStorage.getItem(K.RUNNING) === '1';\\n        const endRaw = localStorage.getItem(K.END);\\n\\n        // Resume\\n        if (remainRaw !== null) {\\n            // Continue timer from REMAINING\\n            const remain = Number(remainRaw);\\n            if (Number.isFinite(remain) && remain > 0) {\\n                localStorage.removeItem(K.REMAINING);\\n                startFocus(display, remain);\\n            }\\n            return;\\n        }\\n\\n        // Start\\n        if (!running) {\\n            // Not running, start wellness then focus\\n            startWellness(onAfter);\\n            return;\\n        }\\n\\n        // Pause\\n        if (endRaw !== null) {\\n            const end = Number(endRaw);\\n            const left = end - now();\\n            if (left > 0) {\\n                localStorage.setItem(K.REMAINING, String(left));\\n                sendMessage({type: 'pause', remaining: left});\\n                if (display) {\\n                    display.textContent = formatTime(left);\\n                }\\n            }\\n        }\\n        clearTick();\\n        localStorage.setItem(K.RUNNING, '0');\\n    }\\n\\n    /**\\n     * Start the wellness countdown and call the callback after completion.\\n     * @param {Function} onAfter Callback to execute after wellness period ends.\\n     */\\n    function startWellness(onAfter) {\\n        setPhase('wellness');\\n        const modal = $('wellness-modal');\\n        const countdown = $('wellness-countdown');\\n        if (!cfg) {\\n            return;\\n        }\\n        if (!modal || !countdown) {\\n            onAfter();\\n            return;\\n        }\\n        const end = now() + cfg.wellnessSec * 1000;\\n        openDialog(modal);\\n        startTimer(end, countdown, () => {\\n            closeDialog(modal);\\n            onAfter();\\n        });\\n        const skip = $('skip-wellness');\\n        if (skip) {\\n            skip.type = 'button';\\n            skip.onclick = (e) => {\\n                e.preventDefault();\\n                e.stopPropagation();\\n                closeDialog(modal);\\n                onAfter();\\n            };\\n        }\\n    }\\n\\n    /**\\n     * Start a break timer and handle break modal UI.\\n     * @param {HTMLElement} el The element to update with the break time.\\n     * @param {number} ms Duration of the break in milliseconds.\\n     * @param {string} kind Type of break ('short' or 'long').\\n     */\\n    function startBreak(el, ms, kind) {\\n        setPhase('break', kind);\\n        const dlg = $('break-modal');\\n        const cd = $('break-countdown');\\n        if (cd) {\\n            cd.textContent = formatTime(ms);\\n        }\\n        openDialog(dlg);\\n        const end = now() + ms;\\n        startTimer(end, cd || el, () => {\\n            alarm('focus');\\n            closeDialog(dlg);\\n            stopAndReset(el, false);\\n        });\\n        const ok = $('dismiss-break');\\n        if (ok) {\\n            ok.type = 'button';\\n            ok.onclick = (e) => {\\n                e.preventDefault();\\n                e.stopPropagation();\\n                closeDialog(dlg);\\n            };\\n        }\\n    }\\n\\n    /**\\n     * Starts the focus timer.\\n     * @param {HTMLElement} el The element to display the countdown.\\n     * @param {number} ms Duration of the focus period in milliseconds.\\n     */\\n    function startFocus(el, ms) {\\n        if (!cfg) {\\n            return;\\n        }\\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\\n        setPhase('focus');\\n        const starttsSec = Math.floor(now() / 1000);\\n        const end = now() + focusDur;\\n        localStorage.setItem(K.END, String(end));\\n        localStorage.setItem(K.RUNNING, '1');\\n        sendMessage({type: 'start', end});\\n        startTimer(end, el, () => {\\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\\n                .then((res) => {\\n                    alarm();\\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\\n                    return null;\\n                })\\n                .catch(Notification.exception);\\n        });\\n    }\\n\\n    // =====================\\n    // State Storage & Inter-tab Communication\\n    // =====================\\n    /**\\n     * Returns scoped localStorage key names for a given course.\\n     * @param {number} courseid The course ID to scope keys.\\n     */\\n    function scoped(courseid) {\\n        /** @returns {ScopedKeys} */\\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\\n        const p = `pomodoro:${cid}`;\\n        return {\\n            END: `${p}:endTimestamp`,\\n            RUNNING: `${p}:running`,\\n            PHASE: `${p}:phase`,\\n            BREAKKIND: `${p}:breakKind`,\\n            MSG: `${p}:msg`,\\n            CHANNEL: `${p}:channel`\\n        };\\n    }\\n\\n    /**\\n     * Sets the current phase and optional break kind in localStorage.\\n     * @param {string} p Phase name.\\n     * @param {string} [k] Optional break kind.\\n     */\\n    function setPhase(p, k) {\\n        localStorage.setItem(K.PHASE, p);\\n        if (k) {\\n            localStorage.setItem(K.BREAKKIND, k);\\n        } else {\\n            localStorage.removeItem(K.BREAKKIND);\\n        }\\n    }\\n\\n    /**\\n     * Gets the current phase from localStorage.\\n     * @returns {string} The current phase name.\\n     */\\n    function getPhase() {\\n        return localStorage.getItem(K.PHASE) || '';\\n    }\\n\\n    /**\\n     * Send a message to other tabs or via BroadcastChannel.\\n     * @param {Object} msg The message object to send.\\n     */\\n    function sendMessage(msg) {\\n        if (channel) {\\n            channel.postMessage(msg);\\n        } else {\\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\\n            setTimeout(function() {\\n                localStorage.removeItem(K.MSG);\\n            }, 50);\\n        }\\n    }\\n\\n    /**\\n     * Handle incoming messages for timer synchronization.\\n     * @param {Object} msg The message object.\\n     * @param {HTMLElement} el The display element to update.\\n     */\\n    function handleMessage(msg, el) {\\n        if (!msg) {\\n            return;\\n        }\\n        if (msg.type === 'start' && msg.end) {\\n            startTimer(Number(msg.end), el);\\n            localStorage.setItem(K.END, String(msg.end));\\n            localStorage.setItem(K.RUNNING, '1');\\n            return;\\n        }\\n        if (msg.type === 'pause' && typeof msg.remaining !== 'undefined') {\\n            clearTick();\\n            localStorage.setItem(K.REMAINING, String(msg.remaining));\\n            localStorage.setItem(K.RUNNING, '0');\\n            if (el) {\\n                el.textContent = formatTime(msg.remaining);\\n            }\\n            return;\\n        }\\n        if ((msg.type === 'stop') && localStorage.getItem(K.END)) {\\n            stopAndReset(el, false);\\n        }\\n    }\\n\\n    /**\\n     * Make an AJAX call using Moodle's core Ajax API.\\n     * @param {string} name The web service method name.\\n     * @param {Object} args Arguments for the web service call.\\n     * @returns {Promise<any>} Promise resolving to the response.\\n     */\\n    function ajax(name, args) {\\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\\n    }\\n\\n    return {\\n        init() {\\n            const display = getTimerElement();\\n            if (!display) {\\n                return;\\n            }\\n            cfg = getConfig(display);\\n            K = scoped(cfg.courseid);\\n\\n            // UI: show interval number\\n            const intervalEl = $('pomodoro-interval');\\n            if (intervalEl) {\\n                intervalEl.textContent = String(cfg.longbreakInterval);\\n            }\\n\\n            // Broadcast channel\\n            if (typeof BroadcastChannel !== 'undefined') {\\n                channel = new BroadcastChannel(K.CHANNEL);\\n                channel.onmessage = (e) => handleMessage(e.data, display);\\n            }\\n\\n            // Initial tomatoes from server\\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\\n                .then((res) => {\\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\\n                    return null;\\n                })\\n                .catch(Notification.exception);\\n\\n            // Resume (only if future)\\n            const existingRaw = localStorage.getItem(K.END);\\n            if (existingRaw !== null) {\\n                const existing = Number(existingRaw);\\n                const phase = getPhase();\\n                let target;\\n                if (phase === 'wellness') {\\n                    target = $('wellness-countdown');\\n                } else if (phase === 'break') {\\n                    target = $('break-countdown');\\n                } else {\\n                    target = display;\\n                }\\n                if (Number.isFinite(existing) && existing > now() + 250) {\\n                    if (phase === 'break') {\\n                        openDialog($('break-modal'));\\n                    }\\n                    if (phase === 'wellness') {\\n                        openDialog($('wellness-modal'));\\n                    }\\n                    startTimer(existing, target || display);\\n                } else {\\n                    localStorage.removeItem(K.END);\\n                    localStorage.setItem(K.RUNNING, '0');\\n                }\\n            }\\n\\n            // Storage sync for this course key\\n            window.addEventListener('storage', (e) => {\\n                if (e.key === K.END) {\\n                    if (e.newValue !== null) {\\n                        const val = Number(e.newValue);\\n                        if (Number.isFinite(val) && val > now() + 250) {\\n                            startTimer(val, display);\\n                        } else {\\n                            localStorage.removeItem(K.END);\\n                            localStorage.setItem(K.RUNNING, '0');\\n                        }\\n                    } else {\\n                        localStorage.setItem(K.RUNNING, '0');\\n                    }\\n                    return;\\n                }\\n                if (e.key === K.MSG && e.newValue) {\\n                    try {\\n                        handleMessage(JSON.parse(e.newValue), display);\\n                    } catch (err) {\\n                        // Ignore malformed or transient values during storage sync\\n                        if (window && window.console && typeof window.console.debug === 'function') {\\n                            window.console.debug('Pomodoro: storage MSG parse ignored', err);\\n                        }\\n                    }\\n                }\\n            });\\n\\n            const startBtn = $('start');\\n            if (startBtn) {\\n                startBtn.type = 'button';\\n                startBtn.onclick = (e) => {\\n                    alarm('click');\\n                    e.preventDefault();\\n                    e.stopPropagation();\\n                    startPausePomodoro(() => startFocus(display, cfg.focusMs));\\n                };\\n            }\\n            const stopBtn = $('stop');\\n            if (stopBtn) {\\n                stopBtn.type = 'button';\\n                stopBtn.onclick = (e) => {\\n                    alarm('click');\\n                    e.preventDefault();\\n                    e.stopPropagation();\\n                    stopAndReset(display, false);\\n                };\\n            }\\n\\n            window.addEventListener('beforeunload', () => {\\n                if (channel) {\\n                    channel.close();\\n                }\\n            });\\n        }\\n    };\\n});\\n\"],\"names\":[\"define\",\"Ajax\",\"Notification\",\"cfg\",\"K\",\"channel\",\"intervalId\",\"clearTick\",\"clearInterval\",\"alarm\",\"kind\",\"soundUrl\",\"M\",\"wwwroot\",\"audio\",\"Audio\",\"play\",\"e\",\"window\",\"navigator\",\"vibrate\",\"$\",\"id\",\"document\",\"getElementById\",\"now\",\"Date\",\"readInt\",\"v\",\"d\",\"n\",\"parseInt\",\"Number\",\"isFinite\",\"formatTime\",\"ms\",\"s\",\"Math\",\"max\",\"floor\",\"m\",\"toString\",\"padStart\",\"r\",\"getTimerElement\",\"renderTomatoes\",\"el\",\"sessionscount\",\"interval\",\"filled\",\"innerHTML\",\"Array\",\"from\",\"length\",\"_\",\"i\",\"join\",\"openDialog\",\"showModal\",\"closeDialog\",\"open\",\"close\",\"startTimer\",\"endTs\",\"onDone\",\"localStorage\",\"removeItem\",\"END\",\"setItem\",\"RUNNING\",\"tick\",\"left\",\"textContent\",\"sendMessage\",\"type\",\"setInterval\",\"stopAndReset\",\"triggerAlarm\",\"focusMs\",\"startPausePomodoro\",\"onAfter\",\"display\",\"remainRaw\",\"getItem\",\"REMAINING\",\"running\",\"endRaw\",\"String\",\"remaining\",\"setPhase\",\"modal\",\"countdown\",\"end\",\"wellnessSec\",\"skip\",\"onclick\",\"preventDefault\",\"stopPropagation\",\"startWellness\",\"remain\",\"startFocus\",\"focusDur\",\"starttsSec\",\"ajax\",\"courseid\",\"startts\",\"then\",\"res\",\"count\",\"longbreakInterval\",\"isLong\",\"c\",\"dlg\",\"cd\",\"ok\",\"startBreak\",\"longbreakMs\",\"shortbreakMs\",\"catch\",\"exception\",\"p\",\"k\",\"PHASE\",\"BREAKKIND\",\"msg\",\"postMessage\",\"MSG\",\"JSON\",\"stringify\",\"Object\",\"assign\",\"t\",\"setTimeout\",\"handleMessage\",\"name\",\"args\",\"call\",\"methodname\",\"init\",\"timerDisplay\",\"getAttribute\",\"focusSec\",\"NaN\",\"focusMin\",\"split\",\"sbSec\",\"lbSec\",\"getConfig\",\"cid\",\"CHANNEL\",\"scoped\",\"intervalEl\",\"BroadcastChannel\",\"onmessage\",\"data\",\"existingRaw\",\"existing\",\"phase\",\"target\",\"addEventListener\",\"key\",\"newValue\",\"parse\",\"err\",\"console\",\"debug\",\"val\",\"startBtn\",\"stopBtn\"],\"mappings\":\"AAKAA,uCAAO,CAAC,YAAa,sBAAsB,SAASC,KAAMC,kBAgBlDC,IAAM,KAYNC,EAAI,KAEJC,QAAU,KAEVC,WAAa,cAORC,YACc,OAAfD,aACAE,cAAcF,YACdA,WAAa,eAQZG,YAAMC,4DAAO,WAEVC,SAEAA,SADS,UAATD,KACWE,EAAET,IAAIU,QAAU,oCAEhBD,EAAET,IAAIU,QAAU,wCAG3BC,MAAQ,IAAIC,MAAMJ,UACtBG,MAAME,OACR,MAAOC,GAEDC,OAAOC,WAAaD,OAAOC,UAAUC,SACrCF,OAAOC,UAAUC,QAAQ,eAW5BC,EAAEC,WACAC,SAASC,eAAeF,aAO1BG,aACEC,KAAKD,eASPE,QAAQC,EAAGC,SACVC,EAAIC,SAASH,MAAAA,EAAAA,EAAK,GAAI,WACrBI,OAAOC,SAASH,GAAKA,EAAID,WAQ3BK,WAAWC,UACVC,EAAIC,KAAKC,IAAI,EAAGD,KAAKE,MAAMJ,GAAK,MAChCK,EAAIH,KAAKE,MAAMH,EAAI,IAAIK,WAAWC,SAAS,EAAG,KAC9CC,GAAKP,EAAI,IAAIK,WAAWC,SAAS,EAAG,qBAChCF,cAAKG,YAUVC,yBACEvB,EAAE,mCASJwB,eAAeC,GAAIC,cAAeC,cAClCF,gBAGChB,EAAIO,KAAKC,IAAI,EAAGN,OAAOe,gBAAkB,GACzCP,EAAIH,KAAKC,IAAI,EAAGN,OAAOgB,WAAa,GACpCC,OAAWnB,EAAIU,GAAO,GAAW,IAANV,EAAWU,EAAKV,EAAIU,EACrDM,GAAGI,UAAYC,MAAMC,KAAK,CAACC,OAAQb,IAAI,CAACc,EAAGC,kCAChBA,EAAIN,OAAS,SAAW,qCACjDO,KAAK,aAOFC,WAAW5B,GACZA,GAA4B,mBAAhBA,EAAE6B,WACd7B,EAAE6B,qBAQDC,YAAY9B,GACbA,GAAKA,EAAE+B,MACP/B,EAAEgC,iBAgEDC,WAAWC,MAAOjB,GAAIkB,YACtBlB,KAAOd,OAAOC,SAAS8B,iBAGxBA,OAAStC,aACTwC,aAAaC,WAAW9D,EAAE+D,UAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAGpC9D,kBACM+D,KAAO,WACHC,KAAOR,MAAQtC,SACjB8C,MAAQ,SACRhE,YACAuC,GAAG0B,YAAc,QACjBP,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,cACfV,QACAA,UAIRlB,GAAG0B,YAActC,WAAWqC,OAEhCD,OACAhE,WAAaqE,YAAYL,KAAM,cAQ1BM,aAAa9B,QAAI+B,qEACtBtE,YACA0D,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,SACf5B,KACAA,GAAG0B,YAActC,WAAW/B,IAAI2E,UAEhCD,cACApE,iBAQCsE,mBAAmBC,aACnB7E,iBAGC8E,QAAUrC,sBACXqC,qBAICC,UAAYjB,aAAakB,QAAQ/E,EAAEgF,WACnCC,QAA8C,MAApCpB,aAAakB,QAAQ/E,EAAEiE,SACjCiB,OAASrB,aAAakB,QAAQ/E,EAAE+D,QAGpB,OAAde,aAWCG,YAOU,OAAXC,OAAiB,OAEXf,KADMvC,OAAOsD,QACA7D,MACf8C,KAAO,IACPN,aAAaG,QAAQhE,EAAEgF,UAAWG,OAAOhB,OACzCE,YAAY,CAACC,KAAM,QAASc,UAAWjB,OACnCU,UACAA,QAAQT,YAActC,WAAWqC,QAI7ChE,YACA0D,aAAaG,QAAQhE,EAAEiE,QAAS,mBAObW,SACnBS,SAAS,kBACHC,MAAQrE,EAAE,kBACVsE,UAAYtE,EAAE,0BACflB,eAGAuF,QAAUC,sBACXX,gBAGEY,IAAMnE,MAA0B,IAAlBtB,IAAI0F,YACxBpC,WAAWiC,OACX5B,WAAW8B,IAAKD,WAAW,KACvBhC,YAAY+B,OACZV,mBAEEc,KAAOzE,EAAE,iBACXyE,OACAA,KAAKpB,KAAO,SACZoB,KAAKC,QAAW9E,IACZA,EAAE+E,iBACF/E,EAAEgF,kBACFtC,YAAY+B,OACZV,YAhDJkB,CAAclB,oBAXRmB,OAASnE,OAAOkD,WAClBlD,OAAOC,SAASkE,SAAWA,OAAS,IACpClC,aAAaC,WAAW9D,EAAEgF,WAC1BgB,WAAWnB,QAASkB,mBAiGvBC,WAAWtD,GAAIX,QACfhC,iBAGCkG,SAAWrE,OAAOC,SAASE,KAAOA,GAAK,EAAIA,GAAK,KACtDsD,SAAS,eACHa,WAAajE,KAAKE,MAAMd,MAAQ,KAChCmE,IAAMnE,MAAQ4E,SACpBpC,aAAaG,QAAQhE,EAAE+D,IAAKoB,OAAOK,MACnC3B,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,QAASkB,IAAAA,MAC5B9B,WAAW8B,IAAK9C,IAAI,KAChByD,KAAK,mCAAoC,CAACC,SAAUrG,IAAIqG,SAAUC,QAASH,aACtEI,MAAMC,MACHlG,cACMmG,MAAQD,KAAoC,iBAAtBA,IAAI5D,cAA6B4D,IAAI5D,cAAgB,EACjFF,eAAexB,EAAE,qBAAsBuF,MAAOzG,IAAI0G,yBAC5CC,QAlMGC,EAkMsBH,OAlMnBrD,EAkM0BpD,IAAI0G,mBAjM3C,GAAKE,EAAI,GAAMA,EAAIxD,GAAO,OADhBwD,EAAGxD,kBAmJRT,GAAIX,GAAIzB,MACxB+E,SAAS,QAAS/E,YACZsG,IAAM3F,EAAE,eACR4F,GAAK5F,EAAE,mBACT4F,KACAA,GAAGzC,YAActC,WAAWC,KAEhCsB,WAAWuD,KAEXlD,WADYrC,MAAQU,GACJ8E,IAAMnE,IAAI,KACtBrC,MAAM,SACNkD,YAAYqD,KACZpC,aAAa9B,IAAI,YAEfoE,GAAK7F,EAAE,iBACT6F,KACAA,GAAGxC,KAAO,SACVwC,GAAGnB,QAAW9E,IACVA,EAAE+E,iBACF/E,EAAEgF,kBACFtC,YAAYqD,OA4BRG,CAAWrE,GAAIgE,OAAS3G,IAAIiH,YAAcjH,IAAIkH,aAAcP,OAAS,OAAS,SACvE,QAEVQ,MAAMpH,aAAaqH,uBA8BvB9B,SAAS+B,EAAGC,GACjBxD,aAAaG,QAAQhE,EAAEsH,MAAOF,GAC1BC,EACAxD,aAAaG,QAAQhE,EAAEuH,UAAWF,GAElCxD,aAAaC,WAAW9D,EAAEuH,oBAgBzBlD,YAAYmD,KACbvH,QACAA,QAAQwH,YAAYD,MAEpB3D,aAAaG,QAAQhE,EAAE0H,IAAKC,KAAKC,UAAUC,OAAOC,OAAO,GAAIN,IAAK,CAACO,EAAG1G,UACtE2G,YAAW,WACPnE,aAAaC,WAAW9D,EAAE0H,OAC3B,cASFO,cAAcT,IAAK9E,OACnB8E,UAGY,UAAbA,IAAIlD,MAAoBkD,IAAIhC,KAC5B9B,WAAW9B,OAAO4F,IAAIhC,KAAM9C,IAC5BmB,aAAaG,QAAQhE,EAAE+D,IAAKoB,OAAOqC,IAAIhC,WACvC3B,aAAaG,QAAQhE,EAAEiE,QAAS,MAGnB,UAAbuD,IAAIlD,WAA6C,IAAlBkD,IAAIpC,WACnCjF,YACA0D,aAAaG,QAAQhE,EAAEgF,UAAWG,OAAOqC,IAAIpC,YAC7CvB,aAAaG,QAAQhE,EAAEiE,QAAS,UAC5BvB,KACAA,GAAG0B,YAActC,WAAW0F,IAAIpC,mBAItB,SAAboC,IAAIlD,MAAoBT,aAAakB,QAAQ/E,EAAE+D,MAChDS,aAAa9B,IAAI,aAUhByD,KAAK+B,KAAMC,aACTtI,KAAKuI,KAAK,CAAC,CAACC,WAAYH,KAAMC,KAAAA,QAAQ,GAAGjB,MAAMpH,aAAaqH,iBAGhE,CACHmB,aACUzD,QAAUrC,sBACXqC,eAGL9E,aA3VWwI,oBACTnC,SAAW7E,QAAQgH,aAAaC,aAAa,iBAAkB,GAC/D/C,YAAclE,QAAQgH,aAAaC,aAAa,qBAAsB,QACxE9D,cACE+D,SAAWlH,QAAQgH,aAAaC,aAAa,kBAAmBE,QAClE9G,OAAOC,SAAS4G,UAChB/D,QAAqB,IAAX+D,aACP,KACCE,SAAWpH,QAAQgH,aAAaC,aAAa,kBAAmBE,KAC/D9G,OAAOC,SAAS8G,YAIjBA,SAAWpH,SAHCgH,aAAaC,aAAa,kBAAoB,SACxCI,MAAM,KACP,IAAM,KACA,KAE3BlE,QAAqB,GAAXiE,SAAgB,QAE1B1B,aACAD,kBACE6B,MAAQtH,QAAQgH,aAAaC,aAAa,uBAAwBE,KAClEI,MAAQvH,QAAQgH,aAAaC,aAAa,sBAAuBE,YACnE9G,OAAOC,SAASgH,SAChB5B,aAAuB,IAAR4B,OAEfjH,OAAOC,SAASiH,SAChB9B,YAAsB,IAAR8B,OAEblH,OAAOC,SAASoF,gBACjBA,aAA8E,GAA/D1F,QAAQgH,aAAaC,aAAa,uBAAwB,GAAU,KAElF5G,OAAOC,SAASmF,eACjBA,YAA6E,GAA/DzF,QAAQgH,aAAaC,aAAa,sBAAuB,IAAW,KAG/E,CAACpC,SAAAA,SAAUX,YAAAA,YAAaf,QAAAA,QAASuC,aAAAA,aAAcD,YAAAA,YAAaP,kBADzClF,QAAQgH,aAAaC,aAAa,2BAA4B,IA0T9EO,CAAUlE,SAChB7E,WAjGQoG,gBAEN4C,IAAMpH,OAAOC,SAASuE,WAAaA,SAAW,EAAIA,SAAW,SAC7DgB,qBAAgB4B,WACf,CACHjF,cAAQqD,mBACRnD,kBAAYmD,cACZE,gBAAUF,YACVG,oBAAcH,gBACdM,cAAQN,UACR6B,kBAAY7B,eAuFR8B,CAAOnJ,IAAIqG,gBAGT+C,WAAalI,EAAE,qBACjBkI,aACAA,WAAW/E,YAAce,OAAOpF,IAAI0G,oBAIR,oBAArB2C,mBACPnJ,QAAU,IAAImJ,iBAAiBpJ,EAAEiJ,SACjChJ,QAAQoJ,UAAaxI,GAAMoH,cAAcpH,EAAEyI,KAAMzE,UAIrDsB,KAAK,4BAA6B,CAACC,SAAUrG,IAAIqG,WAC5CE,MAAMC,YACGC,MAAQD,KAAoC,iBAAtBA,IAAI5D,cAA6B4D,IAAI5D,cAAgB,SACjFF,eAAexB,EAAE,qBAAsBuF,MAAOzG,IAAI0G,mBAC3C,QAEVS,MAAMpH,aAAaqH,iBAGlBoC,YAAc1F,aAAakB,QAAQ/E,EAAE+D,QACvB,OAAhBwF,YAAsB,OAChBC,SAAW5H,OAAO2H,aAClBE,MA3FP5F,aAAakB,QAAQ/E,EAAEsH,QAAU,OA4F5BoC,OAEAA,OADU,aAAVD,MACSxI,EAAE,sBACM,UAAVwI,MACExI,EAAE,mBAEF4D,QAETjD,OAAOC,SAAS2H,WAAaA,SAAWnI,MAAQ,KAClC,UAAVoI,OACApG,WAAWpC,EAAE,gBAEH,aAAVwI,OACApG,WAAWpC,EAAE,mBAEjByC,WAAW8F,SAAUE,QAAU7E,WAE/BhB,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,MAKxCnD,OAAO6I,iBAAiB,WAAY9I,OAC5BA,EAAE+I,MAAQ5J,EAAE+D,QAcZlD,EAAE+I,MAAQ5J,EAAE0H,KAAO7G,EAAEgJ,aAEjB5B,cAAcN,KAAKmC,MAAMjJ,EAAEgJ,UAAWhF,SACxC,MAAOkF,KAEDjJ,QAAUA,OAAOkJ,SAA2C,mBAAzBlJ,OAAOkJ,QAAQC,OAClDnJ,OAAOkJ,QAAQC,MAAM,sCAAuCF,cAnBjD,OAAflJ,EAAEgJ,SAAmB,OACfK,IAAMtI,OAAOf,EAAEgJ,UACjBjI,OAAOC,SAASqI,MAAQA,IAAM7I,MAAQ,IACtCqC,WAAWwG,IAAKrF,UAEhBhB,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,WAGpCJ,aAAaG,QAAQhE,EAAEiE,QAAS,cAgBtCkG,SAAWlJ,EAAE,SACfkJ,WACAA,SAAS7F,KAAO,SAChB6F,SAASxE,QAAW9E,IAChBR,MAAM,SACNQ,EAAE+E,iBACF/E,EAAEgF,kBACFlB,oBAAmB,IAAMqB,WAAWnB,QAAS9E,IAAI2E,mBAGnD0F,QAAUnJ,EAAE,QACdmJ,UACAA,QAAQ9F,KAAO,SACf8F,QAAQzE,QAAW9E,IACfR,MAAM,SACNQ,EAAE+E,iBACF/E,EAAEgF,kBACFrB,aAAaK,SAAS,KAI9B/D,OAAO6I,iBAAiB,gBAAgB,KAChC1J,SACAA,QAAQwD\"}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/amd/build/pomodoro_timer.min.js.map b/amd/build/pomodoro_timer.min.js.map
--- a/amd/build/pomodoro_timer.min.js.map	(revision dbcc9894c4480077f36399cdd8f10f754d10535e)
+++ b/amd/build/pomodoro_timer.min.js.map	(date 1756904733080)
@@ -1,1 +1,1 @@
-{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) — scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // ---------------------------------------------------------------------\n    // Module-level shared mutable state (per page load)\n    // ---------------------------------------------------------------------\n    /**\n     * @typedef {Object} Config\n     * @property {number} courseid\n     * @property {number} wellnessSec\n     * @property {number} focusMs\n     * @property {number} shortbreakMs\n     * @property {number} longbreakMs\n     * @property {number} longbreakInterval\n     */\n    /** @type {null|Config} */\n    let cfg = null; // Set in init().\n    /**\n     * @typedef {Object} ScopedKeys\n     * @property {string} END End timestamp key.\n     * @property {string} REMAINING\n     * @property {string} RUNNING Running state key.\n     * @property {string} PHASE\n     * @property {string} BREAKKIND\n     * @property {string} MSG\n     * @property {string} CHANNEL\n     */\n    /** @type {null|ScopedKeys} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // ---------------------------------------------------------------------\n    // Utility helpers\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     * @param {string} [kind] Type of alarm sound to play ('click' or other).\n     */\n    function alarm(kind = '') {\n        try {\n            var soundUrl;\n            if (kind === 'click') {\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/press.mp3';\n            } else {\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\n            }\n            // Create an Audio object\n            var audio = new Audio(soundUrl);// Replace with actual path if needed\n            audio.play();\n        } catch (e) {\n            // Fallback: browser beep\n            if (window.navigator && window.navigator.vibrate) {\n                window.navigator.vibrate(200);\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Now in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n        return $('pomodoro-timer-display');\n    }\n\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        if (!el) {\n            return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\n        ).join('');\n    }\n\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n        if (d && typeof d.showModal === 'function') {\n            d.showModal();\n        }\n    }\n\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n        if (d && d.open) {\n            d.close();\n        }\n    }\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     * @returns {Config}\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n            shortbreakMs = sbSec * 1000;\n        }\n        if (Number.isFinite(lbSec)) {\n            longbreakMs = lbSec * 1000;\n        }\n        if (!Number.isFinite(shortbreakMs)) {\n            shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n        if (!Number.isFinite(longbreakMs)) {\n            longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n        return i > 0 && c > 0 && (c % i) === 0;\n    }\n\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        if (!el || !Number.isFinite(endTs)) {\n            return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n        clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stop'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n    }\n\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} triggerAlarm Whether to play the alarm sound.\n     */\n    function stopAndReset(el, triggerAlarm = false) {\n        clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stop'});\n        if (el) {\n            el.textContent = formatTime(cfg.focusMs);\n        }\n        if (triggerAlarm) {\n            alarm();\n        }\n    }\n\n    /**\n     * Starts or pauses the Pomodoro timer.\n     * @param {Function} onAfter Callback to execute after starting wellness or focus.\n     */\n    function startPausePomodoro(onAfter) {\n        if (!cfg) {\n            return;\n        }\n        const display = getTimerElement();\n        if (!display) {\n            return;\n        }\n\n        const remainRaw = localStorage.getItem(K.REMAINING);\n        const running = localStorage.getItem(K.RUNNING) === '1';\n        const endRaw = localStorage.getItem(K.END);\n\n        // Resume\n        if (remainRaw !== null) {\n            // Continue timer from REMAINING\n            const remain = Number(remainRaw);\n            if (Number.isFinite(remain) && remain > 0) {\n                localStorage.removeItem(K.REMAINING);\n                startFocus(display, remain);\n            }\n            return;\n        }\n\n        // Start\n        if (!running) {\n            // Not running, start wellness then focus\n            startWellness(onAfter);\n            return;\n        }\n\n        // Pause\n        if (endRaw !== null) {\n            const end = Number(endRaw);\n            const left = end - now();\n            if (left > 0) {\n                localStorage.setItem(K.REMAINING, String(left));\n                sendMessage({type: 'pause', remaining: left});\n                if (display) {\n                    display.textContent = formatTime(left);\n                }\n            }\n        }\n        clearTick();\n        localStorage.setItem(K.RUNNING, '0');\n    }\n\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const modal = $('wellness-modal');\n        const countdown = $('wellness-countdown');\n        if (!cfg) {\n            return;\n        }\n        if (!modal || !countdown) {\n            onAfter();\n            return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(modal);\n        startTimer(end, countdown, () => {\n            closeDialog(modal);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(modal);\n                onAfter();\n            };\n        }\n    }\n\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm('focus');\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n            return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        /** @returns {ScopedKeys} */\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n            localStorage.setItem(K.BREAKKIND, k);\n        } else {\n            localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n                localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n            return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if (msg.type === 'pause' && typeof msg.remaining !== 'undefined') {\n            clearTick();\n            localStorage.setItem(K.REMAINING, String(msg.remaining));\n            localStorage.setItem(K.RUNNING, '0');\n            if (el) {\n                el.textContent = formatTime(msg.remaining);\n            }\n            return;\n        }\n        if ((msg.type === 'stop') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n                return;\n            }\n            cfg = getConfig(display);\n            K = scoped(cfg.courseid);\n\n            // UI: show interval number\n            const intervalEl = $('pomodoro-interval');\n            if (intervalEl) {\n                intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                    target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                    target = $('break-countdown');\n                } else {\n                    target = display;\n                }\n                if (Number.isFinite(existing) && existing > now() + 250) {\n                    if (phase === 'break') {\n                        openDialog($('break-modal'));\n                    }\n                    if (phase === 'wellness') {\n                        openDialog($('wellness-modal'));\n                    }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {\n                        // Ignore malformed or transient values during storage sync\n                        if (window && window.console && typeof window.console.debug === 'function') {\n                            window.console.debug('Pomodoro: storage MSG parse ignored', err);\n                        }\n                    }\n                }\n            });\n\n            const startBtn = $('start');\n            if (startBtn) {\n                startBtn.type = 'button';\n                startBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startPausePomodoro(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const stopBtn = $('stop');\n            if (stopBtn) {\n                stopBtn.type = 'button';\n                stopBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","kind","soundUrl","M","wwwroot","audio","Audio","play","e","window","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","getTimerElement","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","triggerAlarm","focusMs","startPausePomodoro","onAfter","display","remainRaw","getItem","REMAINING","running","endRaw","String","remaining","setPhase","modal","countdown","end","wellnessSec","skip","onclick","preventDefault","stopPropagation","startWellness","remain","startFocus","focusDur","starttsSec","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","dlg","cd","ok","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","name","args","call","methodname","init","timerDisplay","getAttribute","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","console","debug","val","startBtn","stopBtn"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) — scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // ---------------------------------------------------------------------\n    // Module-level shared mutable state (per page load)\n    // ---------------------------------------------------------------------\n    /**\n     * @typedef {Object} Config\n     * @property {number} courseid\n     * @property {number} wellnessSec\n     * @property {number} focusMs\n     * @property {number} shortbreakMs\n     * @property {number} longbreakMs\n     * @property {number} longbreakInterval\n     */\n    /** @type {null|Config} */\n    let cfg = null; // Set in init().\n    /**\n     * @typedef {Object} ScopedKeys\n     * @property {string} END End timestamp key.\n     * @property {string} REMAINING\n     * @property {string} RUNNING Running state key.\n     * @property {string} PHASE\n     * @property {string} BREAKKIND\n     * @property {string} MSG\n     * @property {string} CHANNEL\n     */\n    /** @type {null|ScopedKeys} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // ---------------------------------------------------------------------\n    // Utility helpers\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     * @param {string} [kind] Type of alarm sound to play ('click' or other).\n     */\n    function alarm(kind = '') {\n        try {\n            var soundUrl;\n            if (kind === 'click') {\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/press.mp3';\n            } else {\n                soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\n            }\n            // Create an Audio object\n            var audio = new Audio(soundUrl);// Replace with actual path if needed\n            audio.play();\n        } catch (e) {\n            // Fallback: browser beep\n            if (window.navigator && window.navigator.vibrate) {\n                window.navigator.vibrate(200);\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Now in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n        return $('pomodoro-timer-display');\n    }\n\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        if (!el) {\n            return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\n        ).join('');\n    }\n\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n        if (d && typeof d.showModal === 'function') {\n            d.showModal();\n        }\n    }\n\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n        if (d && d.open) {\n            d.close();\n        }\n    }\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     * @returns {Config}\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n            shortbreakMs = sbSec * 1000;\n        }\n        if (Number.isFinite(lbSec)) {\n            longbreakMs = lbSec * 1000;\n        }\n        if (!Number.isFinite(shortbreakMs)) {\n            shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n        if (!Number.isFinite(longbreakMs)) {\n            longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n        return i > 0 && c > 0 && (c % i) === 0;\n    }\n\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        if (!el || !Number.isFinite(endTs)) {\n            return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n        clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stop'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n    }\n\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} triggerAlarm Whether to play the alarm sound.\n     */\n    function stopAndReset(el, triggerAlarm = false) {\n        clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stop'});\n        if (el) {\n            el.textContent = formatTime(cfg.focusMs);\n        }\n        if (triggerAlarm) {\n            alarm();\n        }\n    }\n\n    /**\n     * Starts or pauses the Pomodoro timer.\n     * @param {Function} onAfter Callback to execute after starting wellness or focus.\n     */\n    function startPausePomodoro(onAfter) {\n        if (!cfg) {\n            return;\n        }\n        const display = getTimerElement();\n        if (!display) {\n            return;\n        }\n\n        const remainRaw = localStorage.getItem(K.REMAINING);\n        const running = localStorage.getItem(K.RUNNING) === '1';\n        const endRaw = localStorage.getItem(K.END);\n\n        // Resume\n        if (remainRaw !== null) {\n            // Continue timer from REMAINING\n            const remain = Number(remainRaw);\n            if (Number.isFinite(remain) && remain > 0) {\n                localStorage.removeItem(K.REMAINING);\n                startFocus(display, remain);\n            }\n            return;\n        }\n\n        // Start\n        if (!running) {\n            // Not running, start wellness then focus\n            startWellness(onAfter);\n            return;\n        }\n\n        // Pause\n        if (endRaw !== null) {\n            const end = Number(endRaw);\n            const left = end - now();\n            if (left > 0) {\n                localStorage.setItem(K.REMAINING, String(left));\n                sendMessage({type: 'pause', remaining: left});\n                if (display) {\n                    display.textContent = formatTime(left);\n                }\n            }\n        }\n        clearTick();\n        localStorage.setItem(K.RUNNING, '0');\n    }\n\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const modal = $('wellness-modal');\n        const countdown = $('wellness-countdown');\n        if (!cfg) {\n            return;\n        }\n        if (!modal || !countdown) {\n            onAfter();\n            return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(modal);\n        startTimer(end, countdown, () => {\n            closeDialog(modal);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                alarm('click')\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(modal);\n                onAfter();\n            };\n        }\n    }\n\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm('focus');\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                alarm('click');\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n            return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        /** @returns {ScopedKeys} */\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n            localStorage.setItem(K.BREAKKIND, k);\n        } else {\n            localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n                localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n            return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if (msg.type === 'pause' && typeof msg.remaining !== 'undefined') {\n            clearTick();\n            localStorage.setItem(K.REMAINING, String(msg.remaining));\n            localStorage.setItem(K.RUNNING, '0');\n            if (el) {\n                el.textContent = formatTime(msg.remaining);\n            }\n            return;\n        }\n        if ((msg.type === 'stop') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n                return;\n            }\n            cfg = getConfig(display);\n            K = scoped(cfg.courseid);\n\n            // UI: show interval number\n            const intervalEl = $('pomodoro-interval');\n            if (intervalEl) {\n                intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                    target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                    target = $('break-countdown');\n                } else {\n                    target = display;\n                }\n                if (Number.isFinite(existing) && existing > now() + 250) {\n                    if (phase === 'break') {\n                        openDialog($('break-modal'));\n                    }\n                    if (phase === 'wellness') {\n                        openDialog($('wellness-modal'));\n                    }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {\n                        // Ignore malformed or transient values during storage sync\n                        if (window && window.console && typeof window.console.debug === 'function') {\n                            window.console.debug('Pomodoro: storage MSG parse ignored', err);\n                        }\n                    }\n                }\n            });\n\n            const startBtn = $('start');\n            if (startBtn) {\n                startBtn.type = 'button';\n                startBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startPausePomodoro(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const stopBtn = $('stop');\n            if (stopBtn) {\n                stopBtn.type = 'button';\n                stopBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","kind","arguments","length","undefined","soundUrl","M","wwwroot","Audio","play","e","window","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","toString","padStart","getTimerElement","renderTomatoes","el","sessionscount","interval","m","filled","innerHTML","Array","from","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","triggerAlarm","focusMs","startPausePomodoro","onAfter","display","remainRaw","getItem","REMAINING","running","endRaw","remain","startFocus","String","remaining","setPhase","modal","countdown","end","wellnessSec","skip","onclick","preventDefault","stopPropagation","startWellness","focusDur","starttsSec","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","dlg","cd","ok","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","name","args","call","methodname","init","timerDisplay","getAttribute","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","console","debug","val","startBtn","stopBtn"],"mappings":"AAKAA,OAAM,gCAAC,CAAC,YAAa,qBAAsB,SAASC,KAAMC,cAgBtD,IAAIC,IAAM,KAYNC,EAAI,KAEJC,QAAU,KAEVC,WAAa,KAOjB,SAASC,YACc,OAAfD,aACAE,cAAcF,YACdA,WAAa,KAErB,CAMA,SAASG,QAAiB,IAAXC,KAAIC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAG,GAClB,IACI,IAAIG,SAEAA,SADS,UAATJ,KACWK,EAAEZ,IAAIa,QAAU,oCAEhBD,EAAEZ,IAAIa,QAAU,oCAGnB,IAAIC,MAAMH,UAChBI,MACT,CAAC,MAAOC,GAEDC,OAAOC,WAAaD,OAAOC,UAAUC,SACrCF,OAAOC,UAAUC,QAAQ,IAEjC,CACJ,CAQA,SAASC,EAAEC,IACP,OAAOC,SAASC,eAAeF,GACnC,CAMA,SAASG,MACL,OAAOC,KAAKD,KAChB,CAQA,SAASE,QAAQC,EAAGC,GAChB,MAAMC,EAAIC,SAASH,GAAK,GAAI,IAC5B,OAAOI,OAAOC,SAASH,GAAKA,EAAID,CACpC,CAOA,SAASK,WAAWC,IAChB,MAAMC,EAAIC,KAAKC,IAAI,EAAGD,KAAKE,MAAMJ,GAAK,MAGtC,MAAO,GAFGE,KAAKE,MAAMH,EAAI,IAAII,WAAWC,SAAS,EAAG,SACzCL,EAAI,IAAII,WAAWC,SAAS,EAAG,MAE9C,CASA,SAASC,kBACL,OAAOrB,EAAE,yBACb,CAQA,SAASsB,eAAeC,GAAIC,cAAeC,UACvC,IAAKF,GACD,OAEJ,MAAMd,EAAIO,KAAKC,IAAI,EAAGN,OAAOa,gBAAkB,GACzCE,EAAIV,KAAKC,IAAI,EAAGN,OAAOc,WAAa,GACpCE,OAAWlB,EAAIiB,IAAO,GAAW,IAANjB,EAAWiB,EAAKjB,EAAIiB,EACrDH,GAAGK,UAAYC,MAAMC,KAAK,CAACzC,OAAQqC,GAAI,CAACK,EAAGC,IACvC,uBAAuBA,EAAIL,OAAS,SAAW,kCACjDM,KAAK,GACX,CAMA,SAASC,WAAW1B,GACZA,GAA4B,mBAAhBA,EAAE2B,WACd3B,EAAE2B,WAEV,CAMA,SAASC,YAAY5B,GACbA,GAAKA,EAAE6B,MACP7B,EAAE8B,OAEV,CA8DA,SAASC,WAAWC,MAAOjB,GAAIkB,QAC3B,IAAKlB,KAAOZ,OAAOC,SAAS4B,OACxB,OAEJ,GAAIA,OAASpC,MAGT,OAFAsC,aAAaC,WAAW9D,EAAE+D,UAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAGpC9D,YACA,MAAM+D,KAAOA,KACT,MAAMC,KAAOR,MAAQpC,MACrB,GAAI4C,MAAQ,EASR,OARAhE,YACAuC,GAAG0B,YAAc,QACjBP,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,cACfV,QACAA,UAIRlB,GAAG0B,YAAcpC,WAAWmC,OAEhCD,OACAhE,WAAaqE,YAAYL,KAAM,IACnC,CAOA,SAASM,aAAa9B,IAA0B,IAAtB+B,aAAYlE,UAAAC,OAAA,QAAAC,IAAAF,UAAA,IAAAA,UAAA,GAClCJ,YACA0D,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,SACf5B,KACAA,GAAG0B,YAAcpC,WAAWjC,IAAI2E,UAEhCD,cACApE,OAER,CAMA,SAASsE,mBAAmBC,SACxB,IAAK7E,IACD,OAEJ,MAAM8E,QAAUrC,kBAChB,IAAKqC,QACD,OAGJ,MAAMC,UAAYjB,aAAakB,QAAQ/E,EAAEgF,WACnCC,QAA8C,MAApCpB,aAAakB,QAAQ/E,EAAEiE,SACjCiB,OAASrB,aAAakB,QAAQ/E,EAAE+D,KAGtC,GAAkB,OAAde,UAAoB,CAEpB,MAAMK,OAASrD,OAAOgD,WAKtB,YAJIhD,OAAOC,SAASoD,SAAWA,OAAS,IACpCtB,aAAaC,WAAW9D,EAAEgF,WAC1BI,WAAWP,QAASM,SAG5B,CAGA,GAAKF,QAAL,CAOA,GAAe,OAAXC,OAAiB,CACjB,MACMf,KADMrC,OAAOoD,QACA3D,MACf4C,KAAO,IACPN,aAAaG,QAAQhE,EAAEgF,UAAWK,OAAOlB,OACzCE,YAAY,CAACC,KAAM,QAASgB,UAAWnB,OACnCU,UACAA,QAAQT,YAAcpC,WAAWmC,OAG7C,CACAhE,YACA0D,aAAaG,QAAQhE,EAAEiE,QAAS,IAfhC,MAsBJ,SAAuBW,SACnBW,SAAS,YACT,MAAMC,MAAQrE,EAAE,kBACVsE,UAAYtE,EAAE,sBACpB,IAAKpB,IACD,OAEJ,IAAKyF,QAAUC,UAEX,YADAb,UAGJ,MAAMc,IAAMnE,MAA0B,IAAlBxB,IAAI4F,YACxBtC,WAAWmC,OACX9B,WAAWgC,IAAKD,UAAW,KACvBlC,YAAYiC,OACZZ,YAEJ,MAAMgB,KAAOzE,EAAE,iBACXyE,OACAA,KAAKtB,KAAO,SACZsB,KAAKC,QAAW9E,IACZV,MAAM,SACNU,EAAE+E,iBACF/E,EAAEgF,kBACFxC,YAAYiC,OACZZ,WAGZ,CApDQoB,CAAcpB,QAkBtB,CAyEA,SAASQ,WAAW1C,GAAIT,IACpB,IAAKlC,IACD,OAEJ,MAAMkG,SAAWnE,OAAOC,SAASE,KAAOA,GAAK,EAAIA,GAAK,KACtDsD,SAAS,SACT,MAAMW,WAAa/D,KAAKE,MAAMd,MAAQ,KAChCmE,IAAMnE,MAAQ0E,SACpBpC,aAAaG,QAAQhE,EAAE+D,IAAKsB,OAAOK,MACnC7B,aAAaG,QAAQhE,EAAEiE,QAAS,KAChCI,YAAY,CAACC,KAAM,QAASoB,UAC5BhC,WAAWgC,IAAKhD,GAAI,KAChByD,KAAK,mCAAoC,CAACC,SAAUrG,IAAIqG,SAAUC,QAASH,aACtEI,KAAMC,MACHlG,QACA,MAAMmG,MAAQD,KAAoC,iBAAtBA,IAAI5D,cAA6B4D,IAAI5D,cAAgB,EACjFF,eAAetB,EAAE,qBAAsBqF,MAAOzG,IAAI0G,mBAClD,MAAMC,QApMGC,EAoMsBH,OApMnBrD,EAoM0BpD,IAAI0G,mBAnM3C,GAAKE,EAAI,GAAMA,EAAIxD,IAAO,GADzC,IAAyBwD,EAAGxD,EAsMZ,OAlDhB,SAAoBT,GAAIT,GAAI3B,MACxBiF,SAAS,QAASjF,MAClB,MAAMsG,IAAMzF,EAAE,eACR0F,GAAK1F,EAAE,mBACT0F,KACAA,GAAGzC,YAAcpC,WAAWC,KAEhCoB,WAAWuD,KAEXlD,WADYnC,MAAQU,GACJ4E,IAAMnE,GAAI,KACtBrC,MAAM,SACNkD,YAAYqD,KACZpC,aAAa9B,IAAI,KAErB,MAAMoE,GAAK3F,EAAE,iBACT2F,KACAA,GAAGxC,KAAO,SACVwC,GAAGjB,QAAW9E,IACVV,MAAM,SACNU,EAAE+E,iBACF/E,EAAEgF,kBACFxC,YAAYqD,MAGxB,CAyBgBG,CAAWrE,GAAIgE,OAAS3G,IAAIiH,YAAcjH,IAAIkH,aAAcP,OAAS,OAAS,SACvE,OAEVQ,MAAMpH,aAAaqH,YAEhC,CA4BA,SAAS5B,SAAS6B,EAAGC,GACjBxD,aAAaG,QAAQhE,EAAEsH,MAAOF,GAC1BC,EACAxD,aAAaG,QAAQhE,EAAEuH,UAAWF,GAElCxD,aAAaC,WAAW9D,EAAEuH,UAElC,CAcA,SAASlD,YAAYmD,KACbvH,QACAA,QAAQwH,YAAYD,MAEpB3D,aAAaG,QAAQhE,EAAE0H,IAAKC,KAAKC,UAAUC,OAAOC,OAAO,CAAE,EAAEN,IAAK,CAACO,EAAGxG,UACtEyG,WAAW,WACPnE,aAAaC,WAAW9D,EAAE0H,IAC7B,EAAE,IAEX,CAOA,SAASO,cAAcT,IAAK9E,IACxB,GAAK8E,IAGL,MAAiB,UAAbA,IAAIlD,MAAoBkD,IAAI9B,KAC5BhC,WAAW5B,OAAO0F,IAAI9B,KAAMhD,IAC5BmB,aAAaG,QAAQhE,EAAE+D,IAAKsB,OAAOmC,IAAI9B,WACvC7B,aAAaG,QAAQhE,EAAEiE,QAAS,MAGnB,UAAbuD,IAAIlD,WAA6C,IAAlBkD,IAAIlC,WACnCnF,YACA0D,aAAaG,QAAQhE,EAAEgF,UAAWK,OAAOmC,IAAIlC,YAC7CzB,aAAaG,QAAQhE,EAAEiE,QAAS,UAC5BvB,KACAA,GAAG0B,YAAcpC,WAAWwF,IAAIlC,mBAItB,SAAbkC,IAAIlD,MAAoBT,aAAakB,QAAQ/E,EAAE+D,MAChDS,aAAa9B,IAAI,GAEzB,CAQA,SAASyD,KAAK+B,KAAMC,MAChB,OAAOtI,KAAKuI,KAAK,CAAC,CAACC,WAAYH,KAAMC,aAAQ,GAAGjB,MAAMpH,aAAaqH,UACvE,CAEA,MAAO,CACHmB,IAAAA,GACI,MAAMzD,QAAUrC,kBAChB,IAAKqC,QACD,OAEJ9E,IA7VR,SAAmBwI,cACf,MAAMnC,SAAW3E,QAAQ8G,aAAaC,aAAa,iBAAkB,GAC/D7C,YAAclE,QAAQ8G,aAAaC,aAAa,qBAAsB,IAC5E,IAAI9D,QACJ,MAAM+D,SAAWhH,QAAQ8G,aAAaC,aAAa,kBAAmBE,KACtE,GAAI5G,OAAOC,SAAS0G,UAChB/D,QAAqB,IAAX+D,aACP,CACH,IAAIE,SAAWlH,QAAQ8G,aAAaC,aAAa,kBAAmBE,KAC/D5G,OAAOC,SAAS4G,YAIjBA,SAAWlH,SAHC8G,aAAaC,aAAa,kBAAoB,SACxCI,MAAM,KACP,IAAM,KACA,KAE3BlE,QAAqB,GAAXiE,SAAgB,GAC9B,CACA,IAAI1B,aACAD,YACJ,MAAM6B,MAAQpH,QAAQ8G,aAAaC,aAAa,uBAAwBE,KAClEI,MAAQrH,QAAQ8G,aAAaC,aAAa,sBAAuBE,KAcvE,OAbI5G,OAAOC,SAAS8G,SAChB5B,aAAuB,IAAR4B,OAEf/G,OAAOC,SAAS+G,SAChB9B,YAAsB,IAAR8B,OAEbhH,OAAOC,SAASkF,gBACjBA,aAA8E,GAA/DxF,QAAQ8G,aAAaC,aAAa,uBAAwB,GAAU,KAElF1G,OAAOC,SAASiF,eACjBA,YAA6E,GAA/DvF,QAAQ8G,aAAaC,aAAa,sBAAuB,IAAW,KAG/E,CAACpC,kBAAUT,wBAAajB,gBAASuC,0BAAcD,wBAAaP,kBADzChF,QAAQ8G,aAAaC,aAAa,2BAA4B,GAE5F,CA0TcO,CAAUlE,SAChB7E,EAjGR,SAAgBoG,UAEZ,MACMgB,EAAI,YADEtF,OAAOC,SAASqE,WAAaA,SAAW,EAAIA,SAAW,WAEnE,MAAO,CACHrC,IAAK,GAAGqD,iBACRnD,QAAS,GAAGmD,YACZE,MAAO,GAAGF,UACVG,UAAW,GAAGH,cACdM,IAAK,GAAGN,QACR4B,QAAS,GAAG5B,YAEpB,CAqFY6B,CAAOlJ,IAAIqG,UAGf,MAAM8C,WAAa/H,EAAE,qBACjB+H,aACAA,WAAW9E,YAAciB,OAAOtF,IAAI0G,oBAIR,oBAArB0C,mBACPlJ,QAAU,IAAIkJ,iBAAiBnJ,EAAEgJ,SACjC/I,QAAQmJ,UAAarI,GAAMkH,cAAclH,EAAEsI,KAAMxE,UAIrDsB,KAAK,4BAA6B,CAACC,SAAUrG,IAAIqG,WAC5CE,KAAMC,MACH,MAAMC,MAAQD,KAAoC,iBAAtBA,IAAI5D,cAA6B4D,IAAI5D,cAAgB,EAEjF,OADAF,eAAetB,EAAE,qBAAsBqF,MAAOzG,IAAI0G,mBAC3C,OAEVS,MAAMpH,aAAaqH,WAGxB,MAAMmC,YAAczF,aAAakB,QAAQ/E,EAAE+D,KAC3C,GAAoB,OAAhBuF,YAAsB,CACtB,MAAMC,SAAWzH,OAAOwH,aAClBE,MA3FP3F,aAAakB,QAAQ/E,EAAEsH,QAAU,GA4FhC,IAAImC,OAEAA,OADU,aAAVD,MACSrI,EAAE,sBACM,UAAVqI,MACErI,EAAE,mBAEF0D,QAET/C,OAAOC,SAASwH,WAAaA,SAAWhI,MAAQ,KAClC,UAAViI,OACAnG,WAAWlC,EAAE,gBAEH,aAAVqI,OACAnG,WAAWlC,EAAE,mBAEjBuC,WAAW6F,SAAUE,QAAU5E,WAE/BhB,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAExC,CAGAjD,OAAO0I,iBAAiB,UAAY3I,IAChC,GAAIA,EAAE4I,MAAQ3J,EAAE+D,KAchB,GAAIhD,EAAE4I,MAAQ3J,EAAE0H,KAAO3G,EAAE6I,SACrB,IACI3B,cAAcN,KAAKkC,MAAM9I,EAAE6I,UAAW/E,QACzC,CAAC,MAAOiF,KAED9I,QAAUA,OAAO+I,SAA2C,mBAAzB/I,OAAO+I,QAAQC,OAClDhJ,OAAO+I,QAAQC,MAAM,sCAAuCF,IAEpE,OArBA,GAAmB,OAAf/I,EAAE6I,SAAmB,CACrB,MAAMK,IAAMnI,OAAOf,EAAE6I,UACjB9H,OAAOC,SAASkI,MAAQA,IAAM1I,MAAQ,IACtCmC,WAAWuG,IAAKpF,UAEhBhB,aAAaC,WAAW9D,EAAE+D,KAC1BF,aAAaG,QAAQhE,EAAEiE,QAAS,KAExC,MACIJ,aAAaG,QAAQhE,EAAEiE,QAAS,OAgB5C,MAAMiG,SAAW/I,EAAE,SACf+I,WACAA,SAAS5F,KAAO,SAChB4F,SAASrE,QAAW9E,IAChBV,MAAM,SACNU,EAAE+E,iBACF/E,EAAEgF,kBACFpB,mBAAmB,IAAMS,WAAWP,QAAS9E,IAAI2E,YAGzD,MAAMyF,QAAUhJ,EAAE,QACdgJ,UACAA,QAAQ7F,KAAO,SACf6F,QAAQtE,QAAW9E,IACfV,MAAM,SACNU,EAAE+E,iBACF/E,EAAEgF,kBACFvB,aAAaK,SAAS,KAI9B7D,OAAO0I,iBAAiB,eAAgB,KAChCzJ,SACAA,QAAQwD,SAGpB,EAER"}
\ No newline at end of file
