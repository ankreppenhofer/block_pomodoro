{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // =====================\n    // Module-level shared mutable state (per page load)\n    // =====================\n    /**\n     * @typedef {Object} Config\n     * @property {number} courseid\n     * @property {number} wellnessSec\n     * @property {number} focusMs\n     * @property {number} shortbreakMs\n     * @property {number} longbreakMs\n     * @property {number} longbreakInterval\n     */\n    /** @type {null|Config} */\n    let cfg = null; // Set in init().\n    /**\n     * @typedef {Object} ScopedKeys\n     * @property {string} END End timestamp key.\n     * @property {string} REMAINING\n     * @property {string} RUNNING Running state key.\n     * @property {string} PHASE\n     * @property {string} BREAKKIND\n     * @property {string} MSG\n     * @property {string} CHANNEL\n     */\n    /** @type {null|ScopedKeys} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // =====================\n    // Utility helpers\n    // =====================\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     * @param {string} [kind] Type of alarm sound to play ('click' or other).\n     */\n    function alarm(kind = '') {\n        try {\n            const soundUrl = kind === 'click'\n                ? `${M.cfg.wwwroot}/blocks/pomodoro/sounds/press.mp3`\n                : `${M.cfg.wwwroot}/blocks/pomodoro/sounds/alert.mp3`;\n            const audio = new Audio(soundUrl);\n            audio.play().catch(() => {\n                if (navigator.vibrate) {\n                    navigator.vibrate(200);\n                }\n            });\n        } catch {\n            if (navigator.vibrate) {\n                navigator.vibrate(200);\n            }\n        }\n    }\n\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Now in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n        return $('pomodoro-timer-display');\n    }\n\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        const tomato = '<svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 512 512\" width=\"25\" height=\"25\" \\n' +\n            '                style=\"vertical-align:middle; margin-right:6px;\">\\n' +\n            '                <polygon style=\"fill:#AB2300;\" points=\"512,155.826 478.609,155.826 ...\"/>\\n' +\n            '               <polygon style=\"fill:#AB2300;\" points=\"512,155.826 478.609,155.826 478.609,100.174 445.217,100.174 445.217,66.783 \\n' +\n            '                    411.826,66.783 411.826,33.391 300.522,33.391 300.522,66.783 267.13,66.783 267.13,0 233.739,0 233.739,66.783 211.478,66.783 \\n' +\n            '                    211.478,33.391 100.174,33.391 100.174,66.783 66.783,66.783 66.783,100.174 33.391,100.174 33.391,155.826 0,155.826 0,345.043 \\n' +\n            '                    33.391,345.043 33.391,411.826 66.783,411.826 66.783,445.217 100.174,445.217 100.174,478.609 166.957,478.609 166.957,512 \\n' +\n            '                    345.043,512 345.043,478.609 411.826,478.609 411.826,445.217 445.217,445.217 445.217,411.826 478.609,411.826 478.609,345.043 \\n' +\n            '                    512,345.043 \"/>\\n' +\n            '                <polygon style=\"fill:#4E901E;\" points=\"445.217,100.174 445.217,66.783 411.826,66.783 411.826,33.391 300.522,33.391 \\n' +\n            '                    300.522,66.783 289.391,66.783 267.13,66.783 267.13,0 233.739,0 233.739,66.783 222.609,66.783 211.478,66.783 211.478,33.391 \\n' +\n            '                    100.174,33.391 100.174,66.783 66.783,66.783 66.783,100.174 33.391,100.174 33.391,155.826 66.783,155.826 133.565,155.826 \\n' +\n            '                    133.565,222.609 222.609,222.609 222.609,189.217 289.391,189.217 289.391,222.609 378.435,222.609 378.435,155.826 \\n' +\n            '                    445.217,155.826 478.609,155.826 478.609,100.174 \"/>\\n' +\n            '                <polygon points=\"233.739,100.174 233.739,122.435 267.13,122.435 267.13,100.174 300.522,100.174 300.522,66.783 267.13,66.783 \\n' +\n            '                    267.13,0 233.739,0 233.739,66.783 211.478,66.783 211.478,100.174 \"/>\\n' +\n            '                <rect x=\"222.609\" y=\"155.826\" width=\"66.783\" height=\"33.391\"/>\\n' +\n            '                <polygon points=\"378.435,122.435 345.043,122.435 345.043,155.826 345.043,189.217 289.391,189.217 289.391,222.609 \\n' +\n            '                    345.043,222.609 378.435,222.609 378.435,189.217 378.435,155.826 445.217,155.826 478.609,155.826 478.609,122.435 \\n' +\n            '                    478.609,100.174 445.217,100.174 445.217,122.435 \"/>\\n' +\n            '                <rect x=\"411.826\" y=\"66.783\" width=\"33.391\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"300.522\" y=\"33.391\" width=\"111.304\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"100.174\" y=\"33.391\" width=\"111.304\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"66.783\" y=\"66.783\" width=\"33.391\" height=\"33.391\"/>\\n' +\n            '                <polygon points=\"133.565,155.826 133.565,189.217 133.565,222.609 166.957,222.609 222.609,222.609 222.609,189.217 \\n' +\n            '                    166.957,189.217 166.957,155.826 166.957,122.435 133.565,122.435 66.783,122.435 66.783,100.174 33.391,100.174 33.391,122.435 \\n' +\n            '                    33.391,155.826 66.783,155.826 \"/>\\n' +\n            '                <rect x=\"33.391\" y=\"345.043\" width=\"33.391\" height=\"66.783\"/>\\n' +\n            '                <rect x=\"66.783\" y=\"411.826\" width=\"33.391\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"100.174\" y=\"445.217\" width=\"66.783\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"166.957\" y=\"478.609\" width=\"178.087\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"345.043\" y=\"445.217\" width=\"66.783\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"411.826\" y=\"411.826\" width=\"33.391\" height=\"33.391\"/>\\n' +\n            '                <rect x=\"445.217\" y=\"345.043\" width=\"33.391\" height=\"66.783\"/>\\n' +\n            '                <rect x=\"478.609\" y=\"155.826\" width=\"33.391\" height=\"189.217\"/>\\n' +\n            '                <rect y=\"155.826\" width=\"33.391\" height=\"189.217\"/>\\n' +\n            '                <g>\\n' +\n            '                    <rect x=\"66.783\" y=\"189.217\" style=\"fill:#FFFFFF;\" width=\"33.391\" height=\"55.652\"/>\\n' +\n            '                    <rect x=\"66.783\" y=\"278.261\" style=\"fill:#FFFFFF;\" width=\"33.391\" height=\"33.391\"/>\\n' +\n            '                </g>\\n' +\n            '            </svg>';\n        if (!el) {\n            return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            i < filled ? tomato : '<span class=\"tomato\" aria-hidden=\"true\"></span>'\n        ).join('');\n    }\n\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n        if (d && typeof d.showModal === 'function') {\n            d.showModal();\n        }\n    }\n\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n        if (d && d.open) {\n            d.close();\n        }\n    }\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     * @returns {Config}\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n            shortbreakMs = sbSec * 1000;\n        }\n        if (Number.isFinite(lbSec)) {\n            longbreakMs = lbSec * 1000;\n        }\n        if (!Number.isFinite(shortbreakMs)) {\n            shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n        if (!Number.isFinite(longbreakMs)) {\n            longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n        return i > 0 && c > 0 && (c % i) === 0;\n    }\n\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        const playButton = document.getElementById('start');\n        const pauseButton = document.getElementById('pause');\n        if (!el || !Number.isFinite(endTs)) {\n            return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n\n        clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stop'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n\n        playButton.classList.add('hidden');\n        pauseButton.classList.remove('hidden');\n    }\n\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} play Whether to play the alarm sound.\n     */\n    function stopAndReset(el, play = false) {\n        let playButton = document.getElementById('start');\n        let pauseButton = document.getElementById('pause');\n        clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stop'});\n        if (el) {\n            el.textContent = formatTime(cfg.focusMs);\n        }\n        if (play) {\n            alarm();\n        }\n    }\n\n    /**\n     * Starts or pauses the Pomodoro timer.\n     * @param {Function} onAfter Callback to execute after starting wellness or focus.\n     */\n    function startPausePomodoro(onAfter) {\n        if (!cfg) {\n            return;\n        }\n        const display = getTimerElement();\n        if (!display) {\n            return;\n        }\n\n        const remainRaw = localStorage.getItem(K.REMAINING);\n        const running = localStorage.getItem(K.RUNNING) === '1';\n        const endRaw = localStorage.getItem(K.END);\n\n        // Resume\n        if (remainRaw !== null) {\n            const remain = Number(remainRaw);\n            if (Number.isFinite(remain) && remain > 0) {\n                localStorage.removeItem(K.REMAINING);\n                startFocus(display, remain);\n            }\n            return;\n        }\n\n        // Start\n        if (!running) {\n            // Not running, start wellness then focus\n            startWellness(onAfter);\n            return;\n        }\n\n        // Pause\n        if (endRaw !== null) {\n            const end = Number(endRaw);\n            const left = end - now();\n            if (left > 0) {\n                localStorage.setItem(K.REMAINING, String(left));\n                sendMessage({type: 'pause', remaining: left});\n                if (display) {\n                    display.textContent = formatTime(left);\n                }\n                const playButton = document.getElementById('start');\n                const pauseButton = document.getElementById('pause');\n                pauseButton.classList.add('hidden');\n                playButton.classList.remove('hidden');\n            }\n        }\n        clearTick();\n        localStorage.setItem(K.RUNNING, '0');\n    }\n\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const modal = $('wellness-modal');\n        const countdown = $('wellness-countdown');\n        if (!cfg) {\n            return;\n        }\n        if (!modal || !countdown) {\n            onAfter();\n            return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(modal);\n        startTimer(end, countdown, () => {\n            closeDialog(modal);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                alarm('click');\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(modal);\n                onAfter();\n            };\n        }\n    }\n\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm('focus');\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                alarm('click');\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n            return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    const playButton = document.getElementById('start');\n                    const pauseButton = document.getElementById('pause');\n                    pauseButton.classList.add('hidden');\n                    playButton.classList.remove('hidden');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        /** @returns {ScopedKeys} */\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n            localStorage.setItem(K.BREAKKIND, k);\n        } else {\n            localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n                localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n            return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if (msg.type === 'pause' && typeof msg.remaining !== 'undefined') {\n            clearTick();\n            localStorage.setItem(K.REMAINING, String(msg.remaining));\n            localStorage.setItem(K.RUNNING, '0');\n            if (el) {\n                el.textContent = formatTime(msg.remaining);\n            }\n            return;\n        }\n        if ((msg.type === 'stop') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n                return;\n            }\n            cfg = getConfig(display);\n            K = scoped(cfg.courseid);\n\n            // UI: show interval number\n            const intervalEl = $('pomodoro-interval');\n            if (intervalEl) {\n                intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                    target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                    target = $('break-countdown');\n                } else {\n                    target = display;\n                }\n                if (Number.isFinite(existing) && existing > now() + 250) {\n                    if (phase === 'break') {\n                        openDialog($('break-modal'));\n                    }\n                    if (phase === 'wellness') {\n                        openDialog($('wellness-modal'));\n                    }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {\n                        // Ignore malformed or transient values during storage sync\n                        if (window && window.console && typeof window.console.debug === 'function') {\n                            window.console.debug('Pomodoro: storage MSG parse ignored', err);\n                        }\n                    }\n                }\n            });\n\n            const startBtn = $('start');\n            if (startBtn) {\n                startBtn.type = 'button';\n                startBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startPausePomodoro(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const pauseBtn = $('pause');\n            if (pauseBtn) {\n                pauseBtn.type = 'button';\n                pauseBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startPausePomodoro(null);\n                };\n            }\n            const resetBtn = $('reset');\n            if (resetBtn) {\n                resetBtn.type = 'button';\n                resetBtn.onclick = (e) => {\n                    alarm('click');\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","kind","soundUrl","M","wwwroot","Audio","play","catch","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","getTimerElement","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","playButton","pauseButton","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","classList","add","remove","stopAndReset","focusMs","startPausePomodoro","onAfter","display","remainRaw","getItem","REMAINING","running","endRaw","String","remaining","setPhase","modal","countdown","end","wellnessSec","skip","onclick","e","preventDefault","stopPropagation","startWellness","remain","startFocus","focusDur","starttsSec","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","dlg","cd","ok","startBreak","longbreakMs","shortbreakMs","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","name","args","call","methodname","init","timerDisplay","getAttribute","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","window","addEventListener","key","newValue","parse","err","console","debug","val","startBtn","pauseBtn","resetBtn"],"mappings":"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"}