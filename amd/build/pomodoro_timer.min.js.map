<<<<<<< HEAD
{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\r\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\r\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\r\n *     block_pomodoro_get_status(courseid:int)\r\n */\r\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\r\n    'use strict';\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Module-level shared mutable state (per page load)\r\n    // ---------------------------------------------------------------------\r\n    /** @type {null|Object} */\r\n    let cfg = null; // Set in init().\r\n    /** @type {null|Object} */\r\n    let K = null; // Key names (scoped localStorage) set in init().\r\n    /** @type {null|BroadcastChannel} */\r\n    let channel = null; // Broadcast channel instance.\r\n    /** @type {null|number} */\r\n    let intervalId = null; // Active countdown interval id.\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Utility helpers\r\n    /**\r\n     * Clears the active countdown interval, if any.\r\n     */\r\n    function clearTick() {\r\n        if (intervalId !== null) {\r\n            clearInterval(intervalId);\r\n            intervalId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays an alarm sound (simple beep using Audio API).\r\n     */\r\n    function alarm(kind = '') {\r\n        try {\r\n            switch (kind) {\r\n                case 'long':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'short':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'focus':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'wellness':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'click':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/press.mp3';\r\n                    break;\r\n                default:\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n            }\r\n            // Create an Audio object\r\n            var audio = new Audio(soundUrl);// Replace with actual path if needed\r\n            audio.play();\r\n        } catch (e) {\r\n            // Fallback: browser beep\r\n            if (window.navigator && window.navigator.vibrate) {\r\n                window.navigator.vibrate(200);\r\n            }\r\n        }\r\n    }\r\n    // ---------------------------------------------------------------------\r\n    /**\r\n     * Shorthand getElementById.\r\n     * @param {string} id\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    function $(id) {\r\n        return document.getElementById(id);\r\n    }\r\n\r\n    /**\r\n     * Timestamp in ms.\r\n     * @returns {number}\r\n     */\r\n    function now() {\r\n        return Date.now();\r\n    }\r\n\r\n    /**\r\n     * Parse an integer with default.\r\n     * @param {string|number|undefined|null} v\r\n     * @param {number} d Default value\r\n     * @returns {number}\r\n     */\r\n    function readInt(v, d) {\r\n        const n = parseInt(v ?? '', 10);\r\n        return Number.isFinite(n) ? n : d;\r\n    }\r\n\r\n    /**\r\n     * Format milliseconds as mm:ss.\r\n     * @param {number} ms\r\n     * @returns {string}\r\n     */\r\n    function formatTime(ms) {\r\n        const s = Math.max(0, Math.floor(ms / 1000));\r\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\r\n        const r = (s % 60).toString().padStart(2, '0');\r\n        return `${m}:${r}`;\r\n    }\r\n\r\n    // =====================\r\n    // UI Functions\r\n    // =====================\r\n    /**\r\n     * Returns the display element for the Pomodoro timer.\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    function getTimerElement() {\r\n     return $('pomodoro-timer-display');\r\n    }\r\n    /**\r\n     * Renders tomato icons for Pomodoro sessions.\r\n     * @param {HTMLElement} el The container element.\r\n     * @param {number} sessionscount Number of completed sessions.\r\n     * @param {number} interval Number of sessions per long break.\r\n     */\r\n    function renderTomatoes(el, sessionscount, interval) {\r\n        if (!el) {\r\n         return;\r\n        }\r\n        const n = Math.max(0, Number(sessionscount) || 0);\r\n        const m = Math.max(1, Number(interval) || 0);\r\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\r\n        el.innerHTML = Array.from({length: m}, (_, i) =>\r\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\r\n        ).join('');\r\n    }\r\n    /**\r\n     * Opens the dialog element.\r\n     * @param {HTMLDialogElement} d The dialog element to open.\r\n     */\r\n    function openDialog(d) {\r\n     if (d && typeof d.showModal === 'function') {\r\n     d.showModal();\r\n    }\r\n    }\r\n    /**\r\n     * Closes the dialog element.\r\n     * @param {HTMLDialogElement} d The dialog element to open.\r\n     */\r\n    function closeDialog(d) {\r\n     if (d && d.open) {\r\n     d.close();\r\n    }\r\n}\r\n\r\n    // =====================\r\n    // Pomodoro Logic\r\n    // =====================\r\n    /**\r\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\r\n     * @param {HTMLElement} timerDisplay The timer display element.\r\n     */\r\n    function getConfig(timerDisplay) {\r\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\r\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\r\n        let focusMs;\r\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\r\n        if (Number.isFinite(focusSec)) {\r\n            focusMs = focusSec * 1000;\r\n        } else {\r\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\r\n            if (!Number.isFinite(focusMin)) {\r\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\r\n                const parts = dur.split(':');\r\n                const mm = parts[0] || '25';\r\n                focusMin = readInt(mm, 25);\r\n            }\r\n            focusMs = focusMin * 60 * 1000;\r\n        }\r\n        let shortbreakMs;\r\n        let longbreakMs;\r\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\r\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\r\n        if (Number.isFinite(sbSec)) {\r\n         shortbreakMs = sbSec * 1000;\r\n        }\r\n                if (Number.isFinite(lbSec)) {\r\n         longbreakMs = lbSec * 1000;\r\n        }\r\n                if (!Number.isFinite(shortbreakMs)) {\r\n         shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\r\n        }\r\n                if (!Number.isFinite(longbreakMs)) {\r\n         longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\r\n        }\r\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\r\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\r\n    }\r\n    /**\r\n     * Determines if the next break is a long break.\r\n     * @param {number} c Number of completed sessions.\r\n     * @param {number} i Interval for long breaks.\r\n     */\r\n    function nextIsLongBreak(c, i) {\r\n     return i > 0 && c > 0 && (c % i) === 0;\r\n    }\r\n    /**\r\n     * Starts the countdown timer.\r\n     * @param {number} endTs Timestamp (ms) when the timer ends.\r\n     * @param {HTMLElement} el Element to display the countdown.\r\n     * @param {Function} onDone Callback when timer finishes.\r\n     */\r\n    function startTimer(endTs, el, onDone) {\r\n        if (!el || !Number.isFinite(endTs)) {\r\n         return;\r\n        }\r\n        if (endTs <= now()) {\r\n            localStorage.removeItem(K.END);\r\n            localStorage.setItem(K.RUNNING, '0');\r\n            return;\r\n        }\r\n    clearTick();\r\n        const tick = () => {\r\n            const left = endTs - now();\r\n            if (left <= 0) {\r\n                clearTick();\r\n                el.textContent = '00:00';\r\n                localStorage.removeItem(K.END);\r\n                localStorage.setItem(K.RUNNING, '0');\r\n                sendMessage({type: 'stopped'});\r\n                if (onDone) {\r\n                    onDone();\r\n                }\r\n                return;\r\n            }\r\n            el.textContent = formatTime(left);\r\n        };\r\n        tick();\r\n        intervalId = setInterval(tick, 1000);\r\n    }\r\n    /**\r\n     * Stop the timer and reset the display.\r\n     * @param {HTMLElement} el The element to update with reset time.\r\n     * @param {boolean} play Whether to play the alarm sound.\r\n     */\r\n    function stopAndReset(el, play = false) {\r\n    clearTick();\r\n        localStorage.removeItem(K.END);\r\n        localStorage.setItem(K.RUNNING, '0');\r\n        sendMessage({type: 'stopped'});\r\n        if (el) {\r\n            el.textContent = '00:00';\r\n        }\r\n        if (play) {\r\n            alarm();\r\n        }\r\n    }\r\n    /**\r\n     * Start the wellness countdown and call the callback after completion.\r\n     * @param {Function} onAfter Callback to execute after wellness period ends.\r\n     */\r\n    function startWellness(onAfter) {\r\n        setPhase('wellness');\r\n        const dlg = $('wellness-modal');\r\n        const cd = $('wellness-countdown');\r\n        if (!cfg) {\r\n         return;\r\n        }\r\n        if (!dlg || !cd) {\r\n         onAfter(); return;\r\n        }\r\n        const end = now() + cfg.wellnessSec * 1000;\r\n        openDialog(dlg);\r\n        startTimer(end, cd, () => {\r\n            closeDialog(dlg);\r\n            onAfter();\r\n        });\r\n        const skip = $('skip-wellness');\r\n        if (skip) {\r\n            skip.type = 'button';\r\n            skip.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                closeDialog(dlg);\r\n                onAfter();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Start a break timer and handle break modal UI.\r\n     * @param {HTMLElement} el The element to update with the break time.\r\n     * @param {number} ms Duration of the break in milliseconds.\r\n     * @param {string} kind Type of break ('short' or 'long').\r\n     */\r\n    function startBreak(el, ms, kind) {\r\n        setPhase('break', kind);\r\n        const dlg = $('break-modal');\r\n        const cd = $('break-countdown');\r\n        if (cd) {\r\n            cd.textContent = formatTime(ms);\r\n        }\r\n        openDialog(dlg);\r\n        const end = now() + ms;\r\n        startTimer(end, cd || el, () => {\r\n            alarm();\r\n            closeDialog(dlg);\r\n            stopAndReset(el, false);\r\n        });\r\n        const ok = $('dismiss-break');\r\n        if (ok) {\r\n            ok.type = 'button';\r\n            ok.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                closeDialog(dlg);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Starts the focus timer.\r\n     * @param {HTMLElement} el The element to display the countdown.\r\n     * @param {number} ms Duration of the focus period in milliseconds.\r\n     */\r\n    function startFocus(el, ms) {\r\n\r\n        if (!cfg) {\r\n         return;\r\n        }\r\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\r\n        setPhase('focus');\r\n        const starttsSec = Math.floor(now() / 1000);\r\n        const end = now() + focusDur;\r\n        localStorage.setItem(K.END, String(end));\r\n        localStorage.setItem(K.RUNNING, '1');\r\n        sendMessage({type: 'start', end});\r\n        startTimer(end, el, () => {\r\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\r\n                .then((res) => {\r\n                    alarm();\r\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\r\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\r\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\r\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\r\n                    return null;\r\n                })\r\n                .catch(Notification.exception);\r\n        });\r\n    }\r\n\r\n    // =====================\r\n    // State Storage & Inter-tab Communication\r\n    // =====================\r\n    /**\r\n     * Returns scoped localStorage key names for a given course.\r\n     * @param {number} courseid The course ID to scope keys.\r\n     */\r\n    function scoped(courseid) {\r\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\r\n        const p = `pomodoro:${cid}`;\r\n        return {\r\n            END: `${p}:endTimestamp`,\r\n            RUNNING: `${p}:running`,\r\n            PHASE: `${p}:phase`,\r\n            BREAKKIND: `${p}:breakKind`,\r\n            MSG: `${p}:msg`,\r\n            CHANNEL: `${p}:channel`\r\n        };\r\n    }\r\n    /**\r\n     * Sets the current phase and optional break kind in localStorage.\r\n     * @param {string} p Phase name.\r\n     * @param {string} [k] Optional break kind.\r\n     */\r\n    function setPhase(p, k) {\r\n        localStorage.setItem(K.PHASE, p);\r\n        if (k) {\r\n         localStorage.setItem(K.BREAKKIND, k);\r\n        } else {\r\n         localStorage.removeItem(K.BREAKKIND);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the current phase from localStorage.\r\n     * @returns {string} The current phase name.\r\n     */\r\n    function getPhase() {\r\n        return localStorage.getItem(K.PHASE) || '';\r\n    }\r\n    /**\r\n     * Send a message to other tabs or via BroadcastChannel.\r\n     * @param {Object} msg The message object to send.\r\n     */\r\n    function sendMessage(msg) {\r\n        if (channel) {\r\n            channel.postMessage(msg);\r\n        } else {\r\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\r\n            setTimeout(function() {\r\n             localStorage.removeItem(K.MSG);\r\n            }, 50);\r\n        }\r\n    }\r\n    /**\r\n     * Handle incoming messages for timer synchronization.\r\n     * @param {Object} msg The message object.\r\n     * @param {HTMLElement} el The display element to update.\r\n     */\r\n    function handleMessage(msg, el) {\r\n        if (!msg) {\r\n         return;\r\n        }\r\n        if (msg.type === 'start' && msg.end) {\r\n            startTimer(Number(msg.end), el);\r\n            localStorage.setItem(K.END, String(msg.end));\r\n            localStorage.setItem(K.RUNNING, '1');\r\n            return;\r\n        }\r\n        if ((msg.type === 'stop' || msg.type === 'stopped') && localStorage.getItem(K.END)) {\r\n            stopAndReset(el, false);\r\n        }\r\n    }\r\n    /**\r\n     * Make an AJAX call using Moodle's core Ajax API.\r\n     * @param {string} name The web service method name.\r\n     * @param {Object} args Arguments for the web service call.\r\n     * @returns {Promise<any>} Promise resolving to the response.\r\n     */\r\n    function ajax(name, args) {\r\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            const display = getTimerElement();\r\n            if (!display) {\r\n             return;\r\n            }\r\n                        cfg = getConfig(display);\r\n                        K = scoped(cfg.courseid);\r\n\r\n                        // UI: show interval number\r\n                        const intervalEl = $('pomodoro-interval');\r\n                        if (intervalEl) {\r\n             intervalEl.textContent = String(cfg.longbreakInterval);\r\n            }\r\n\r\n            // Broadcast channel\r\n            if (typeof BroadcastChannel !== 'undefined') {\r\n                channel = new BroadcastChannel(K.CHANNEL);\r\n                channel.onmessage = (e) => handleMessage(e.data, display);\r\n            }\r\n\r\n            // Initial tomatoes from server\r\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\r\n                .then((res) => {\r\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\r\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\r\n                    return null;\r\n                })\r\n                .catch(Notification.exception);\r\n\r\n            // Resume (only if future)\r\n            const existingRaw = localStorage.getItem(K.END);\r\n            if (existingRaw !== null) {\r\n                const existing = Number(existingRaw);\r\n                const phase = getPhase();\r\n                let target;\r\n                if (phase === 'wellness') {\r\n                 target = $('wellness-countdown');\r\n                } else if (phase === 'break') {\r\n                 target = $('break-countdown');\r\n                } else {\r\n                 target = display;\r\n                }\r\n                                if (Number.isFinite(existing) && existing > now() + 250) {\r\n                                    if (phase === 'break') {\r\n                 openDialog($('break-modal'));\r\n                }\r\n                                    if (phase === 'wellness') {\r\n                 openDialog($('wellness-modal'));\r\n                }\r\n                    startTimer(existing, target || display);\r\n                } else {\r\n                    localStorage.removeItem(K.END);\r\n                    localStorage.setItem(K.RUNNING, '0');\r\n                }\r\n            }\r\n\r\n            // Storage sync for this course key\r\n            window.addEventListener('storage', (e) => {\r\n                if (e.key === K.END) {\r\n                    if (e.newValue !== null) {\r\n                        const val = Number(e.newValue);\r\n                        if (Number.isFinite(val) && val > now() + 250) {\r\n                            startTimer(val, display);\r\n                        } else {\r\n                            localStorage.removeItem(K.END);\r\n                            localStorage.setItem(K.RUNNING, '0');\r\n                        }\r\n                    } else {\r\n                        localStorage.setItem(K.RUNNING, '0');\r\n                    }\r\n                    return;\r\n                }\r\n                if (e.key === K.MSG && e.newValue) {\r\n                    try {\r\n                        handleMessage(JSON.parse(e.newValue), display);\r\n                    } catch (err) {}\r\n                }\r\n            });\r\n\r\n            const startBtn = $('start');\r\n            if (startBtn) {\r\n                startBtn.type = 'button';\r\n                startBtn.onclick = (e) => {\r\n                    alarm('click');\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    startWellness(() => startFocus(display, cfg.focusMs));\r\n                };\r\n            }\r\n            const stopBtn = $('stop');\r\n            if (stopBtn) {\r\n                stopBtn.type = 'button';\r\n                stopBtn.onclick = (e) => {\r\n                    alarm('click');\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    stopAndReset(display, false);\r\n                };\r\n            }\r\n\r\n            window.addEventListener('beforeunload', () => {\r\n                if (channel) {\r\n                    channel.close();\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","kind","soundUrl","M","wwwroot","audio","Audio","play","e","window","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","startFocus","focusDur","setPhase","starttsSec","end","String","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","dlg","cd","ok","onclick","preventDefault","stopPropagation","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","getItem","name","args","call","methodname","init","display","timerDisplay","getAttribute","wellnessSec","focusMs","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","val","startBtn","onAfter","skip","startWellness","stopBtn"],"mappings":"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"}
=======
{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // ---------------------------------------------------------------------\n    // Module-level shared mutable state (per page load)\n    // ---------------------------------------------------------------------\n    /**\n     * @typedef {Object} Config\n     * @property {number} courseid\n     * @property {number} wellnessSec\n     * @property {number} focusMs\n     * @property {number} shortbreakMs\n     * @property {number} longbreakMs\n     * @property {number} longbreakInterval\n     */\n    /** @type {null|Config} */\n    let cfg = null; // Set in init().\n    /**\n     * @typedef {Object} ScopedKeys\n     * @property {string} END End timestamp key.\n     * @property {string} REMAINING\n     * @property {string} RUNNING Running state key.\n     * @property {string} PHASE\n     * @property {string} BREAKKIND\n     * @property {string} MSG\n     * @property {string} CHANNEL\n     */\n    /** @type {null|ScopedKeys} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // ---------------------------------------------------------------------\n    // Utility helpers\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     */\n    function alarm() {\n        try {\n            const audio = new window.Audio('/media/notification.mp3'); // Replace with actual path if needed\n            audio.play();\n        } catch (e) {\n            // Fallback: browser beep\n            if (window.navigator && window.navigator.vibrate) {\n                window.navigator.vibrate(200);\n            }\n        }\n    }\n\n    // ---------------------------------------------------------------------\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Now in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n        return $('pomodoro-timer-display');\n    }\n\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        if (!el) {\n            return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\n        ).join('');\n    }\n\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n        if (d && typeof d.showModal === 'function') {\n            d.showModal();\n        }\n    }\n\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n        if (d && d.open) {\n            d.close();\n        }\n    }\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     * @returns {Config}\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n            shortbreakMs = sbSec * 1000;\n        }\n        if (Number.isFinite(lbSec)) {\n            longbreakMs = lbSec * 1000;\n        }\n        if (!Number.isFinite(shortbreakMs)) {\n            shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n        if (!Number.isFinite(longbreakMs)) {\n            longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n        return i > 0 && c > 0 && (c % i) === 0;\n    }\n\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        if (!el || !Number.isFinite(endTs)) {\n            return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n        clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stop'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n    }\n\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} triggerAlarm Whether to play the alarm sound.\n     */\n    function stopAndReset(el, triggerAlarm = false) {\n        clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stop'});\n        if (el) {\n            el.textContent = formatTime(cfg.focusMs);\n        }\n        if (triggerAlarm) {\n            alarm();\n        }\n    }\n\n    /**\n     * Starts or pauses the Pomodoro timer.\n     * @param {Function} onAfter Callback to execute after starting wellness or focus.\n     */\n    function startPausePomodoro(onAfter) {\n        if (!cfg) {\n            return;\n        }\n        const display = getTimerElement();\n        if (!display) {\n            return;\n        }\n\n        const remainRaw = localStorage.getItem(K.REMAINING);\n        const running = localStorage.getItem(K.RUNNING) === '1';\n        const endRaw = localStorage.getItem(K.END);\n\n        // Resume\n        if (remainRaw !== null) {\n            // Continue timer from REMAINING\n            const remain = Number(remainRaw);\n            if (Number.isFinite(remain) && remain > 0) {\n                localStorage.removeItem(K.REMAINING);\n                startFocus(display, remain);\n            }\n            return;\n        }\n\n        // Start\n        if (!running) {\n            // Not running, start wellness then focus\n            startWellness(onAfter);\n            return;\n        }\n\n        // Pause\n        if (endRaw !== null) {\n            const end = Number(endRaw);\n            const left = end - now();\n            if (left > 0) {\n                localStorage.setItem(K.REMAINING, String(left));\n                sendMessage({type: 'pause', remaining: left});\n                if (display) {\n                    display.textContent = formatTime(left);\n                }\n            }\n        }\n        clearTick();\n        localStorage.setItem(K.RUNNING, '0');\n    }\n\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const modal = $('wellness-modal');\n        const countdown = $('wellness-countdown');\n        if (!cfg) {\n            return;\n        }\n        if (!modal || !countdown) {\n            onAfter();\n            return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(modal);\n        startTimer(end, countdown, () => {\n            closeDialog(modal);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(modal);\n                onAfter();\n            };\n        }\n    }\n\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm();\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n            return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        /** @returns {ScopedKeys} */\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n            localStorage.setItem(K.BREAKKIND, k);\n        } else {\n            localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n                localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n            return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if (msg.type === 'pause' && typeof msg.remaining !== 'undefined') {\n            clearTick();\n            localStorage.setItem(K.REMAINING, String(msg.remaining));\n            localStorage.setItem(K.RUNNING, '0');\n            if (el) {\n                el.textContent = formatTime(msg.remaining);\n            }\n            return;\n        }\n        if ((msg.type === 'stop') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n                return;\n            }\n            cfg = getConfig(display);\n            K = scoped(cfg.courseid);\n\n            // UI: show interval number\n            const intervalEl = $('pomodoro-interval');\n            if (intervalEl) {\n                intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                    target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                    target = $('break-countdown');\n                } else {\n                    target = display;\n                }\n                if (Number.isFinite(existing) && existing > now() + 250) {\n                    if (phase === 'break') {\n                        openDialog($('break-modal'));\n                    }\n                    if (phase === 'wellness') {\n                        openDialog($('wellness-modal'));\n                    }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {\n                        // Ignore malformed or transient values during storage sync\n                        if (window && window.console && typeof window.console.debug === 'function') {\n                            window.console.debug('Pomodoro: storage MSG parse ignored', err);\n                        }\n                    }\n                }\n            });\n\n            const toggleStartButton = $('start');\n            if (toggleStartButton) {\n                toggleStartButton.type = 'button';\n                toggleStartButton.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startPausePomodoro(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const resetBtn = $('stop');\n            if (resetBtn) {\n                resetBtn.type = 'button';\n                resetBtn.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","window","Audio","play","e","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","getTimerElement","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","triggerAlarm","focusMs","startPausePomodoro","onAfter","display","remainRaw","getItem","REMAINING","running","endRaw","String","remaining","setPhase","modal","countdown","end","wellnessSec","skip","onclick","preventDefault","stopPropagation","startWellness","remain","startFocus","focusDur","starttsSec","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","kind","dlg","cd","ok","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","name","args","call","methodname","init","timerDisplay","getAttribute","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","console","debug","val","toggleStartButton","resetBtn"],"mappings":"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"}
>>>>>>> f9011ed (add start pause logic)
