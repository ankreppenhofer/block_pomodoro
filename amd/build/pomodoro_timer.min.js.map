{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["import Ajax from 'core/ajax';\n/**\n * Pomodoro Timer.\n *\n * @module     block_pomodoro/pomodoro_timer\n * @copyright  2025 Alissa Cenga <alissa.cenga@tuwien.ac.at>\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n// javascript\nexport const init = () => {\n    const STORAGE_KEY = \"pomodoro:endTimestamp\";\n    const RUNNING_KEY = \"pomodoro:running\";\n\n    const pomodoroTimerDisplay = document.getElementById(\"pomodoro-timer-display\");\n    let myInterval = null;\n    let broadcast = null;\n\n    // Check for BroadcastChannel support and setup pomodoro channel if available\n    if (typeof BroadcastChannel !== \"undefined\") {\n        broadcast = new BroadcastChannel(\"pomodoro\");\n        broadcast.onmessage = (ev) => handleMessage(ev.data);\n    }\n\n    /**\n     * Send a message to other tabs/windows.\n     * @param {Object} msg - Message payload to send to other tabs.\n     */\n    function sendMessage(msg) {\n        if (broadcast) {\n            broadcast.postMessage(msg);\n        } else {\n            // Fallback: write a transient storage key to trigger others\n            localStorage.setItem(\"pomodoro:msg\", JSON.stringify({...msg, t: Date.now()}));\n            // Remove immediately to avoid buildup\n            setTimeout(() => localStorage.removeItem(\"pomodoro:msg\"), 50);\n        }\n    }\n\n    /**\n     * Format milliseconds to MM:SS.\n     * @param {number} ms - Milliseconds to format.\n     * @returns {string} Formatted time as MM:SS.\n     */\n    function formatMs(ms) {\n        const totalSeconds = Math.max(0, Math.floor(ms / 1000));\n        const minutes = Math.floor(totalSeconds / 60).toString().padStart(2, \"0\");\n        const seconds = (totalSeconds % 60).toString().padStart(2, \"0\");\n        return `${minutes}:${seconds}`;\n    }\n\n    /**\n     * Stops the timer, clears interval, updates display, and shared state.\n     * Optionally plays alarm.\n     * @param {Element} timerDisplayElement\n     * @param {boolean} playAlarm\n     */\n    function stopAndResetTimerDisplay(timerDisplayElement, playAlarm = false) {\n        if (myInterval) {\n            clearInterval(myInterval);\n            myInterval = null;\n        }\n        localStorage.removeItem(STORAGE_KEY);\n        localStorage.setItem(RUNNING_KEY, \"0\");\n        sendMessage({type: \"stopped\"});\n        if (timerDisplayElement) {\n            timerDisplayElement.textContent = \"00:00\";\n        }\n        if (playAlarm) {\n            try {\n                const alarm = new Audio(\n                    \"https://www.freespecialeffects.co.uk/soundfx/scifi/electronic.wav\"\n                );\n                alarm.play().catch(() => {});\n            } catch (e) {}\n        }\n    }\n\n    /**\n     * Starts a local countdown timer and updates the display element.\n     * Clears any previous timer, sets up a new interval, and handles timer completion.\n     *\n     * @param {number} endTimestamp - The timestamp (in ms) when the timer should end.\n     * @param {HTMLElement} timerDisplayElement - The DOM element to display the timer countdown.\n     */\n    function startLocalTimer(endTimestamp, timerDisplayElement) {\n        if (!timerDisplayElement) {\n            return;\n        }\n        if (myInterval) {\n            clearInterval(myInterval); // Change to return; if you want to ignore new starts while running\n        }\n\n        /**\n         * Updates the timer display every tick and handles timer completion.\n         */\n        function tick() {\n            // const msRemaining = endTimestamp - Date.now();\n            const msRemaining = 0;\n            if (msRemaining <= 0) {\n                stopAndResetTimerDisplay(timerDisplayElement, true);\n\n                Ajax.call([{\n                    methodname: 'block_pomodoro_increment_session',\n                    args: { courseid: M.cfg.courseId || 0 },\n                }])[0].done(function(response) {\n                    console.log('Pomodoro completed, total sessions =', response.sessioncount);\n                    const counterEl = document.getElementById(\"pomodoro-session-count\");\n                    if (counterEl) {\n                        counterEl.textContent = response.sessioncount;\n                    }\n                }).fail(function(ex) {\n                    console.error('Error incrementing pomodoro session', ex);\n                });\n\n                return;\n            }\n            timerDisplayElement.textContent = formatMs(msRemaining);\n        }\n\n        // Immediate update then start interval\n        tick();\n        myInterval = setInterval(tick, 1000);\n    }\n\n    /**\n     * Handle incoming messages from other tabs.\n     * @param {{type: string, end?: number}} msg - Message object with `type` and optional `end` timestamp.\n     */\n    function handleMessage(msg) {\n        if (!msg) {\n            return;\n        }\n        if (msg.type === \"start\" && msg.end) {\n            startLocalTimer(Number(msg.end), pomodoroTimerDisplay);\n            localStorage.setItem(STORAGE_KEY, String(msg.end));\n            localStorage.setItem(RUNNING_KEY, \"1\");\n        } else if (msg.type === \"stop\" || msg.type === \"stopped\") {\n            if (myInterval) {\n                clearInterval(myInterval);\n                myInterval = null;\n            }\n            if (pomodoroTimerDisplay) {\n                pomodoroTimerDisplay.textContent = \"00:00\";\n            }\n            localStorage.removeItem(STORAGE_KEY);\n            localStorage.setItem(RUNNING_KEY, \"0\");\n        }\n    }\n\n    /**\n     * Start a timer attached to the given display element.\n     * @param {HTMLElement} timerdisplay - DOM element that displays the countdown.\n     */\n    function startTimer(timerdisplay) {\n        if (!timerdisplay) {\n            return;\n        }\n        // Clear local interval if any\n        if (myInterval) {\n            clearInterval(myInterval);\n        }\n\n        const durationAttr = timerdisplay.getAttribute(\"data-duration\") || \"25:00\";\n        const minutes = parseInt(durationAttr.split(\":\")[0], 10) || 25;\n        const durationMs = minutes * 60 * 1000;\n        const endTimestamp = Date.now() + durationMs;\n\n        // Persist and notify other tabs\n        localStorage.setItem(STORAGE_KEY, String(endTimestamp));\n        localStorage.setItem(RUNNING_KEY, \"1\");\n        sendMessage({type: \"start\", end: endTimestamp});\n\n        // Start locally\n        startLocalTimer(endTimestamp, timerdisplay);\n    }\n\n    /**\n     * Stops the local timer, clears the interval, updates the display,\n     */\n    function stopTimer() {\n        stopAndResetTimerDisplay(pomodoroTimerDisplay, false);\n    }\n\n    // Respond to storage events (other tabs)\n    window.addEventListener(\"storage\", (e) => {\n        if (e.key === STORAGE_KEY) {\n            if (e.newValue) {\n                startLocalTimer(Number(e.newValue), pomodoroTimerDisplay);\n            } else {\n                // Timer removed/stopped\n                if (myInterval) {\n                    clearInterval(myInterval);\n                    myInterval = null;\n                }\n                if (pomodoroTimerDisplay) {\n                    pomodoroTimerDisplay.textContent = \"00:00\";\n                }\n            }\n        } else if (e.key === RUNNING_KEY) {\n            // Nothing else needed here; STORAGE_KEY handles actual timestamp\n        } else if (e.key === \"pomodoro:msg\" && e.newValue) {\n            try {\n                const msg = JSON.parse(e.newValue);\n                handleMessage(msg);\n            } catch (err) {\n            }\n        }\n    });\n\n    // Also listen to broadcast channel messages (already wired above via broadcast.onmessage)\n    // initial resume if another tab already started a timer\n    const existing = localStorage.getItem(STORAGE_KEY);\n    if (existing) {\n        startLocalTimer(Number(existing), pomodoroTimerDisplay);\n    }\n\n    document.getElementById(\"start\").addEventListener(\"click\", function() {\n        startTimer(pomodoroTimerDisplay);\n    });\n\n    document.getElementById(\"stop\").addEventListener(\"click\", function() {\n        stopTimer();\n    });\n\n    // Clean up on unload\n    window.addEventListener(\"beforeunload\", () => {\n        if (broadcast) {\n            broadcast.close();\n        }\n    });\n};\n"],"names":["e","_ajax","__esModule","default","_exports","init","STORAGE_KEY","RUNNING_KEY","pomodoroTimerDisplay","document","getElementById","myInterval","broadcast","sendMessage","msg","postMessage","localStorage","setItem","JSON","stringify","t","Date","now","setTimeout","removeItem","stopAndResetTimerDisplay","timerDisplayElement","playAlarm","arguments","length","undefined","clearInterval","type","textContent","Audio","play","catch","startLocalTimer","endTimestamp","tick","Ajax","call","methodname","args","courseid","M","cfg","courseId","done","response","console","log","sessioncount","counterEl","fail","ex","error","setInterval","handleMessage","end","Number","String","BroadcastChannel","onmessage","ev","data","window","addEventListener","key","newValue","parse","err","existing","getItem","timerdisplay","durationAttr","getAttribute","durationMs","parseInt","split","startTimer","close"],"mappings":"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"}