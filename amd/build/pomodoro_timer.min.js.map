{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // ---------------------------------------------------------------------\n    // Module-level shared mutable state (per page load)\n    // ---------------------------------------------------------------------\n    /** @type {null|Object} */\n    let cfg = null; // Set in init().\n    /** @type {null|Object} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // ---------------------------------------------------------------------\n    // Utility helpers\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     */\n    function alarm() {\n        try {\n            const audio = new window.Audio('/media/notification.mp3'); // Replace with actual path if needed\n            audio.play();\n        } catch (e) {\n            // Fallback: browser beep\n            if (window.navigator && window.navigator.vibrate) {\n                window.navigator.vibrate(200);\n            }\n        }\n    }\n    // ---------------------------------------------------------------------\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Timestamp in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n     return $('pomodoro-timer-display');\n    }\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        if (!el) {\n         return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\n        ).join('');\n    }\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n     if (d && typeof d.showModal === 'function') {\n     d.showModal();\n    }\n    }\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n     if (d && d.open) {\n     d.close();\n    }\n}\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n         shortbreakMs = sbSec * 1000;\n        }\n                if (Number.isFinite(lbSec)) {\n         longbreakMs = lbSec * 1000;\n        }\n                if (!Number.isFinite(shortbreakMs)) {\n         shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n                if (!Number.isFinite(longbreakMs)) {\n         longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n     return i > 0 && c > 0 && (c % i) === 0;\n    }\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        if (!el || !Number.isFinite(endTs)) {\n         return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n    clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stopped'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n    }\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} play Whether to play the alarm sound.\n     */\n    function stopAndReset(el, play = false) {\n    clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stopped'});\n        if (el) {\n            el.textContent = '00:00';\n        }\n        if (play) {\n            alarm();\n        }\n    }\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const dlg = $('wellness-modal');\n        const cd = $('wellness-countdown');\n        if (!cfg) {\n         return;\n        }\n        if (!dlg || !cd) {\n         onAfter(); return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(dlg);\n        startTimer(end, cd, () => {\n            closeDialog(dlg);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n                onAfter();\n            };\n        }\n    }\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm();\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n         return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n         localStorage.setItem(K.BREAKKIND, k);\n        } else {\n         localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n             localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n         return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if ((msg.type === 'stop' || msg.type === 'stopped') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n             return;\n            }\n                        cfg = getConfig(display);\n                        K = scoped(cfg.courseid);\n\n                        // UI: show interval number\n                        const intervalEl = $('pomodoro-interval');\n                        if (intervalEl) {\n             intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                 target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                 target = $('break-countdown');\n                } else {\n                 target = display;\n                }\n                                if (Number.isFinite(existing) && existing > now() + 250) {\n                                    if (phase === 'break') {\n                 openDialog($('break-modal'));\n                }\n                                    if (phase === 'wellness') {\n                 openDialog($('wellness-modal'));\n                }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {}\n                }\n            });\n\n            const startBtn = $('start');\n            if (startBtn) {\n                startBtn.type = 'button';\n                startBtn.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startWellness(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const stopBtn = $('stop');\n            if (stopBtn) {\n                stopBtn.type = 'button';\n                stopBtn.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","window","Audio","play","e","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","toString","padStart","renderTomatoes","el","sessionscount","interval","m","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","arguments","undefined","startFocus","focusDur","setPhase","starttsSec","end","String","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","kind","dlg","cd","ok","onclick","preventDefault","stopPropagation","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","getItem","name","args","call","methodname","init","display","timerDisplay","getAttribute","wellnessSec","focusMs","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","val","startBtn","onAfter","skip","startWellness","stopBtn"],"mappings":"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"}