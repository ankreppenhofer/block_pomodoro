{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\n *     block_pomodoro_get_status(courseid:int)\n */\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\n    'use strict';\n\n    // ---------------------------------------------------------------------\n    // Module-level shared mutable state (per page load)\n    // ---------------------------------------------------------------------\n    /** @type {null|Object} */\n    let cfg = null; // Set in init().\n    /** @type {null|Object} */\n    let K = null; // Key names (scoped localStorage) set in init().\n    /** @type {null|BroadcastChannel} */\n    let channel = null; // Broadcast channel instance.\n    /** @type {null|number} */\n    let intervalId = null; // Active countdown interval id.\n\n    // ---------------------------------------------------------------------\n    // Utility helpers\n    /**\n     * Clears the active countdown interval, if any.\n     */\n    function clearTick() {\n        if (intervalId !== null) {\n            clearInterval(intervalId);\n            intervalId = null;\n        }\n    }\n\n    /**\n     * Plays an alarm sound (simple beep using Audio API).\n     */\n    function alarm() {\n        try {\n            const audio = new window.Audio('/media/notification.mp3'); // Replace with actual path if needed\n            audio.play();\n        } catch (e) {\n            // Fallback: browser beep\n            if (window.navigator && window.navigator.vibrate) {\n                window.navigator.vibrate(200);\n            }\n        }\n    }\n    // ---------------------------------------------------------------------\n    /**\n     * Shorthand getElementById.\n     * @param {string} id\n     * @returns {HTMLElement|null}\n     */\n    function $(id) {\n        return document.getElementById(id);\n    }\n\n    /**\n     * Timestamp in ms.\n     * @returns {number}\n     */\n    function now() {\n        return Date.now();\n    }\n\n    /**\n     * Parse an integer with default.\n     * @param {string|number|undefined|null} v\n     * @param {number} d Default value\n     * @returns {number}\n     */\n    function readInt(v, d) {\n        const n = parseInt(v ?? '', 10);\n        return Number.isFinite(n) ? n : d;\n    }\n\n    /**\n     * Format milliseconds as mm:ss.\n     * @param {number} ms\n     * @returns {string}\n     */\n    function formatTime(ms) {\n        const s = Math.max(0, Math.floor(ms / 1000));\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\n        const r = (s % 60).toString().padStart(2, '0');\n        return `${m}:${r}`;\n    }\n\n    // =====================\n    // UI Functions\n    // =====================\n    /**\n     * Returns the display element for the Pomodoro timer.\n     * @returns {HTMLElement|null}\n     */\n    function getTimerElement() {\n     return $('pomodoro-timer-display');\n    }\n    /**\n     * Renders tomato icons for Pomodoro sessions.\n     * @param {HTMLElement} el The container element.\n     * @param {number} sessionscount Number of completed sessions.\n     * @param {number} interval Number of sessions per long break.\n     */\n    function renderTomatoes(el, sessionscount, interval) {\n        if (!el) {\n         return;\n        }\n        const n = Math.max(0, Number(sessionscount) || 0);\n        const m = Math.max(1, Number(interval) || 0);\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\n        el.innerHTML = Array.from({length: m}, (_, i) =>\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\n        ).join('');\n    }\n    /**\n     * Opens the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function openDialog(d) {\n     if (d && typeof d.showModal === 'function') {\n     d.showModal();\n    }\n    }\n    /**\n     * Closes the dialog element.\n     * @param {HTMLDialogElement} d The dialog element to open.\n     */\n    function closeDialog(d) {\n     if (d && d.open) {\n     d.close();\n    }\n}\n\n    // =====================\n    // Pomodoro Logic\n    // =====================\n    /**\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\n     * @param {HTMLElement} timerDisplay The timer display element.\n     */\n    function getConfig(timerDisplay) {\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\n        let focusMs;\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\n        if (Number.isFinite(focusSec)) {\n            focusMs = focusSec * 1000;\n        } else {\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\n            if (!Number.isFinite(focusMin)) {\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\n                const parts = dur.split(':');\n                const mm = parts[0] || '25';\n                focusMin = readInt(mm, 25);\n            }\n            focusMs = focusMin * 60 * 1000;\n        }\n        let shortbreakMs;\n        let longbreakMs;\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\n        if (Number.isFinite(sbSec)) {\n         shortbreakMs = sbSec * 1000;\n        }\n                if (Number.isFinite(lbSec)) {\n         longbreakMs = lbSec * 1000;\n        }\n                if (!Number.isFinite(shortbreakMs)) {\n         shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\n        }\n                if (!Number.isFinite(longbreakMs)) {\n         longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\n        }\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\n    }\n    /**\n     * Determines if the next break is a long break.\n     * @param {number} c Number of completed sessions.\n     * @param {number} i Interval for long breaks.\n     */\n    function nextIsLongBreak(c, i) {\n     return i > 0 && c > 0 && (c % i) === 0;\n    }\n    /**\n     * Starts the countdown timer.\n     * @param {number} endTs Timestamp (ms) when the timer ends.\n     * @param {HTMLElement} el Element to display the countdown.\n     * @param {Function} onDone Callback when timer finishes.\n     */\n    function startTimer(endTs, el, onDone) {\n        if (!el || !Number.isFinite(endTs)) {\n         return;\n        }\n        if (endTs <= now()) {\n            localStorage.removeItem(K.END);\n            localStorage.setItem(K.RUNNING, '0');\n            return;\n        }\n    clearTick();\n        const tick = () => {\n            const left = endTs - now();\n            if (left <= 0) {\n                clearTick();\n                el.textContent = '00:00';\n                localStorage.removeItem(K.END);\n                localStorage.setItem(K.RUNNING, '0');\n                sendMessage({type: 'stopped'});\n                if (onDone) {\n                    onDone();\n                }\n                return;\n            }\n            el.textContent = formatTime(left);\n        };\n        tick();\n        intervalId = setInterval(tick, 1000);\n    }\n    /**\n     * Stop the timer and reset the display.\n     * @param {HTMLElement} el The element to update with reset time.\n     * @param {boolean} play Whether to play the alarm sound.\n     */\n    function stopAndReset(el, play = false) {\n    clearTick();\n        localStorage.removeItem(K.END);\n        localStorage.setItem(K.RUNNING, '0');\n        sendMessage({type: 'stopped'});\n        if (el) {\n            el.textContent = '00:00';\n        }\n        if (play) {\n            alarm();\n        }\n    }\n    /**\n     * Start the wellness countdown and call the callback after completion.\n     * @param {Function} onAfter Callback to execute after wellness period ends.\n     */\n    function startWellness(onAfter) {\n        setPhase('wellness');\n        const dlg = $('wellness-modal');\n        const cd = $('wellness-countdown');\n        if (!cfg) {\n         return;\n        }\n        if (!dlg || !cd) {\n         onAfter(); return;\n        }\n        const end = now() + cfg.wellnessSec * 1000;\n        openDialog(dlg);\n        startTimer(end, cd, () => {\n            closeDialog(dlg);\n            onAfter();\n        });\n        const skip = $('skip-wellness');\n        if (skip) {\n            skip.type = 'button';\n            skip.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n                onAfter();\n            };\n        }\n    }\n    /**\n     * Start a break timer and handle break modal UI.\n     * @param {HTMLElement} el The element to update with the break time.\n     * @param {number} ms Duration of the break in milliseconds.\n     * @param {string} kind Type of break ('short' or 'long').\n     */\n    function startBreak(el, ms, kind) {\n        setPhase('break', kind);\n        const dlg = $('break-modal');\n        const cd = $('break-countdown');\n        if (cd) {\n            cd.textContent = formatTime(ms);\n        }\n        openDialog(dlg);\n        const end = now() + ms;\n        startTimer(end, cd || el, () => {\n            alarm();\n            closeDialog(dlg);\n            stopAndReset(el, false);\n        });\n        const ok = $('dismiss-break');\n        if (ok) {\n            ok.type = 'button';\n            ok.onclick = (e) => {\n                e.preventDefault();\n                e.stopPropagation();\n                closeDialog(dlg);\n            };\n        }\n    }\n    /**\n     * Starts the focus timer.\n     * @param {HTMLElement} el The element to display the countdown.\n     * @param {number} ms Duration of the focus period in milliseconds.\n     */\n    function startFocus(el, ms) {\n        if (!cfg) {\n         return;\n        }\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\n        setPhase('focus');\n        const starttsSec = Math.floor(now() / 1000);\n        const end = now() + focusDur;\n        localStorage.setItem(K.END, String(end));\n        localStorage.setItem(K.RUNNING, '1');\n        sendMessage({type: 'start', end});\n        startTimer(end, el, () => {\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\n                .then((res) => {\n                    alarm();\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\n                    return null;\n                })\n                .catch(Notification.exception);\n        });\n    }\n\n    // =====================\n    // State Storage & Inter-tab Communication\n    // =====================\n    /**\n     * Returns scoped localStorage key names for a given course.\n     * @param {number} courseid The course ID to scope keys.\n     */\n    function scoped(courseid) {\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\n        const p = `pomodoro:${cid}`;\n        return {\n            END: `${p}:endTimestamp`,\n            RUNNING: `${p}:running`,\n            PHASE: `${p}:phase`,\n            BREAKKIND: `${p}:breakKind`,\n            MSG: `${p}:msg`,\n            CHANNEL: `${p}:channel`\n        };\n    }\n    /**\n     * Sets the current phase and optional break kind in localStorage.\n     * @param {string} p Phase name.\n     * @param {string} [k] Optional break kind.\n     */\n    function setPhase(p, k) {\n        localStorage.setItem(K.PHASE, p);\n        if (k) {\n         localStorage.setItem(K.BREAKKIND, k);\n        } else {\n         localStorage.removeItem(K.BREAKKIND);\n        }\n    }\n    /**\n     * Gets the current phase from localStorage.\n     * @returns {string} The current phase name.\n     */\n    function getPhase() {\n        return localStorage.getItem(K.PHASE) || '';\n    }\n    /**\n     * Send a message to other tabs or via BroadcastChannel.\n     * @param {Object} msg The message object to send.\n     */\n    function sendMessage(msg) {\n        if (channel) {\n            channel.postMessage(msg);\n        } else {\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\n            setTimeout(function() {\n             localStorage.removeItem(K.MSG);\n            }, 50);\n        }\n    }\n    /**\n     * Handle incoming messages for timer synchronization.\n     * @param {Object} msg The message object.\n     * @param {HTMLElement} el The display element to update.\n     */\n    function handleMessage(msg, el) {\n        if (!msg) {\n         return;\n        }\n        if (msg.type === 'start' && msg.end) {\n            startTimer(Number(msg.end), el);\n            localStorage.setItem(K.END, String(msg.end));\n            localStorage.setItem(K.RUNNING, '1');\n            return;\n        }\n        if ((msg.type === 'stop' || msg.type === 'stopped') && localStorage.getItem(K.END)) {\n            stopAndReset(el, false);\n        }\n    }\n    /**\n     * Make an AJAX call using Moodle's core Ajax API.\n     * @param {string} name The web service method name.\n     * @param {Object} args Arguments for the web service call.\n     * @returns {Promise<any>} Promise resolving to the response.\n     */\n    function ajax(name, args) {\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\n    }\n\n    return {\n        init() {\n            const display = getTimerElement();\n            if (!display) {\n             return;\n            }\n                        cfg = getConfig(display);\n                        K = scoped(cfg.courseid);\n\n                        // UI: show interval number\n                        const intervalEl = $('pomodoro-interval');\n                        if (intervalEl) {\n             intervalEl.textContent = String(cfg.longbreakInterval);\n            }\n\n            // Broadcast channel\n            if (typeof BroadcastChannel !== 'undefined') {\n                channel = new BroadcastChannel(K.CHANNEL);\n                channel.onmessage = (e) => handleMessage(e.data, display);\n            }\n\n            // Initial tomatoes from server\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\n                .then((res) => {\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\n                    return null;\n                })\n                .catch(Notification.exception);\n\n            // Resume (only if future)\n            const existingRaw = localStorage.getItem(K.END);\n            if (existingRaw !== null) {\n                const existing = Number(existingRaw);\n                const phase = getPhase();\n                let target;\n                if (phase === 'wellness') {\n                 target = $('wellness-countdown');\n                } else if (phase === 'break') {\n                 target = $('break-countdown');\n                } else {\n                 target = display;\n                }\n                                if (Number.isFinite(existing) && existing > now() + 250) {\n                                    if (phase === 'break') {\n                 openDialog($('break-modal'));\n                }\n                                    if (phase === 'wellness') {\n                 openDialog($('wellness-modal'));\n                }\n                    startTimer(existing, target || display);\n                } else {\n                    localStorage.removeItem(K.END);\n                    localStorage.setItem(K.RUNNING, '0');\n                }\n            }\n\n            // Storage sync for this course key\n            window.addEventListener('storage', (e) => {\n                if (e.key === K.END) {\n                    if (e.newValue !== null) {\n                        const val = Number(e.newValue);\n                        if (Number.isFinite(val) && val > now() + 250) {\n                            startTimer(val, display);\n                        } else {\n                            localStorage.removeItem(K.END);\n                            localStorage.setItem(K.RUNNING, '0');\n                        }\n                    } else {\n                        localStorage.setItem(K.RUNNING, '0');\n                    }\n                    return;\n                }\n                if (e.key === K.MSG && e.newValue) {\n                    try {\n                        handleMessage(JSON.parse(e.newValue), display);\n                    } catch (err) {}\n                }\n            });\n\n            const startBtn = $('start');\n            if (startBtn) {\n                startBtn.type = 'button';\n                startBtn.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    startWellness(() => startFocus(display, cfg.focusMs));\n                };\n            }\n            const stopBtn = $('stop');\n            if (stopBtn) {\n                stopBtn.type = 'button';\n                stopBtn.onclick = (e) => {\n                    e.preventDefault();\n                    e.stopPropagation();\n                    stopAndReset(display, false);\n                };\n            }\n\n            window.addEventListener('beforeunload', () => {\n                if (channel) {\n                    channel.close();\n                }\n            });\n        }\n    };\n});\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","window","Audio","play","e","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","startFocus","focusDur","setPhase","starttsSec","end","String","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","kind","dlg","cd","ok","onclick","preventDefault","stopPropagation","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","getItem","name","args","call","methodname","init","display","timerDisplay","getAttribute","wellnessSec","focusMs","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","val","startBtn","onAfter","skip","startWellness","stopBtn"],"mappings":"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"}