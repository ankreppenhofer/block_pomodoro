{"version":3,"file":"pomodoro_timer.min.js","sources":["../src/pomodoro_timer.js"],"sourcesContent":["/**\r\n * Pomodoro Timer (AMD) â€” scoped by course, increments only when focus ends.\r\n * WS: block_pomodoro_increment_session(courseid:int, startts:int [UNIX seconds])\r\n *     block_pomodoro_get_status(courseid:int)\r\n */\r\ndefine(['core/ajax', 'core/notification'], function(Ajax, Notification) {\r\n    'use strict';\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Module-level shared mutable state (per page load)\r\n    // ---------------------------------------------------------------------\r\n    /** @type {null|Object} */\r\n    let cfg = null; // Set in init().\r\n    /** @type {null|Object} */\r\n    let K = null; // Key names (scoped localStorage) set in init().\r\n    /** @type {null|BroadcastChannel} */\r\n    let channel = null; // Broadcast channel instance.\r\n    /** @type {null|number} */\r\n    let intervalId = null; // Active countdown interval id.\r\n\r\n    // ---------------------------------------------------------------------\r\n    // Utility helpers\r\n    /**\r\n     * Clears the active countdown interval, if any.\r\n     */\r\n    function clearTick() {\r\n        if (intervalId !== null) {\r\n            clearInterval(intervalId);\r\n            intervalId = null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Plays an alarm sound (simple beep using Audio API).\r\n     */\r\n    function alarm(kind = '') {\r\n        try {\r\n            switch (kind) {\r\n                case 'long':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'short':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'focus':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'wellness':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n                    break;\r\n                case 'click':\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/press.mp3';\r\n                    break;\r\n                default:\r\n                    var soundUrl = M.cfg.wwwroot + '/blocks/pomodoro/sounds/alert.mp3';\r\n            }\r\n            // Create an Audio object\r\n            var audio = new Audio(soundUrl);// Replace with actual path if needed\r\n            audio.play();\r\n        } catch (e) {\r\n            // Fallback: browser beep\r\n            if (window.navigator && window.navigator.vibrate) {\r\n                window.navigator.vibrate(200);\r\n            }\r\n        }\r\n    }\r\n    // ---------------------------------------------------------------------\r\n    /**\r\n     * Shorthand getElementById.\r\n     * @param {string} id\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    function $(id) {\r\n        return document.getElementById(id);\r\n    }\r\n\r\n    /**\r\n     * Timestamp in ms.\r\n     * @returns {number}\r\n     */\r\n    function now() {\r\n        return Date.now();\r\n    }\r\n\r\n    /**\r\n     * Parse an integer with default.\r\n     * @param {string|number|undefined|null} v\r\n     * @param {number} d Default value\r\n     * @returns {number}\r\n     */\r\n    function readInt(v, d) {\r\n        const n = parseInt(v ?? '', 10);\r\n        return Number.isFinite(n) ? n : d;\r\n    }\r\n\r\n    /**\r\n     * Format milliseconds as mm:ss.\r\n     * @param {number} ms\r\n     * @returns {string}\r\n     */\r\n    function formatTime(ms) {\r\n        const s = Math.max(0, Math.floor(ms / 1000));\r\n        const m = Math.floor(s / 60).toString().padStart(2, '0');\r\n        const r = (s % 60).toString().padStart(2, '0');\r\n        return `${m}:${r}`;\r\n    }\r\n\r\n    // =====================\r\n    // UI Functions\r\n    // =====================\r\n    /**\r\n     * Returns the display element for the Pomodoro timer.\r\n     * @returns {HTMLElement|null}\r\n     */\r\n    function getTimerElement() {\r\n     return $('pomodoro-timer-display');\r\n    }\r\n    /**\r\n     * Renders tomato icons for Pomodoro sessions.\r\n     * @param {HTMLElement} el The container element.\r\n     * @param {number} sessionscount Number of completed sessions.\r\n     * @param {number} interval Number of sessions per long break.\r\n     */\r\n    function renderTomatoes(el, sessionscount, interval) {\r\n        if (!el) {\r\n         return;\r\n        }\r\n        const n = Math.max(0, Number(sessionscount) || 0);\r\n        const m = Math.max(1, Number(interval) || 0);\r\n        const filled = ((n % m) === 0 && n !== 0) ? m : (n % m);\r\n        el.innerHTML = Array.from({length: m}, (_, i) =>\r\n            `<span class=\"tomato ${i < filled ? 'filled' : ''}\" aria-hidden=\"true\"></span>`\r\n        ).join('');\r\n    }\r\n    /**\r\n     * Opens the dialog element.\r\n     * @param {HTMLDialogElement} d The dialog element to open.\r\n     */\r\n    function openDialog(d) {\r\n     if (d && typeof d.showModal === 'function') {\r\n     d.showModal();\r\n    }\r\n    }\r\n    /**\r\n     * Closes the dialog element.\r\n     * @param {HTMLDialogElement} d The dialog element to open.\r\n     */\r\n    function closeDialog(d) {\r\n     if (d && d.open) {\r\n     d.close();\r\n    }\r\n}\r\n\r\n    // =====================\r\n    // Pomodoro Logic\r\n    // =====================\r\n    /**\r\n     * Extracts Pomodoro configuration from the timer display element. Fallback to defaults if attributes are missing or invalid.\r\n     * @param {HTMLElement} timerDisplay The timer display element.\r\n     */\r\n    function getConfig(timerDisplay) {\r\n        const courseid = readInt(timerDisplay.getAttribute('data-courseid'), 0);\r\n        const wellnessSec = readInt(timerDisplay.getAttribute('data-wellness-sec'), 30);\r\n        let focusMs;\r\n        const focusSec = readInt(timerDisplay.getAttribute('data-focus-sec'), NaN);\r\n        if (Number.isFinite(focusSec)) {\r\n            focusMs = focusSec * 1000;\r\n        } else {\r\n            let focusMin = readInt(timerDisplay.getAttribute('data-focus-min'), NaN);\r\n            if (!Number.isFinite(focusMin)) {\r\n                const dur = timerDisplay.getAttribute('data-duration') || '25:00';\r\n                const parts = dur.split(':');\r\n                const mm = parts[0] || '25';\r\n                focusMin = readInt(mm, 25);\r\n            }\r\n            focusMs = focusMin * 60 * 1000;\r\n        }\r\n        let shortbreakMs;\r\n        let longbreakMs;\r\n        const sbSec = readInt(timerDisplay.getAttribute('data-shortbreak-sec'), NaN);\r\n        const lbSec = readInt(timerDisplay.getAttribute('data-longbreak-sec'), NaN);\r\n        if (Number.isFinite(sbSec)) {\r\n         shortbreakMs = sbSec * 1000;\r\n        }\r\n                if (Number.isFinite(lbSec)) {\r\n         longbreakMs = lbSec * 1000;\r\n        }\r\n                if (!Number.isFinite(shortbreakMs)) {\r\n         shortbreakMs = readInt(timerDisplay.getAttribute('data-shortbreak-min'), 5) * 60 * 1000;\r\n        }\r\n                if (!Number.isFinite(longbreakMs)) {\r\n         longbreakMs = readInt(timerDisplay.getAttribute('data-longbreak-min'), 15) * 60 * 1000;\r\n        }\r\n        const longbreakInterval = readInt(timerDisplay.getAttribute('data-longbreak-interval'), 3);\r\n        return {courseid, wellnessSec, focusMs, shortbreakMs, longbreakMs, longbreakInterval};\r\n    }\r\n    /**\r\n     * Determines if the next break is a long break.\r\n     * @param {number} c Number of completed sessions.\r\n     * @param {number} i Interval for long breaks.\r\n     */\r\n    function nextIsLongBreak(c, i) {\r\n     return i > 0 && c > 0 && (c % i) === 0;\r\n    }\r\n    /**\r\n     * Starts the countdown timer.\r\n     * @param {number} endTs Timestamp (ms) when the timer ends.\r\n     * @param {HTMLElement} el Element to display the countdown.\r\n     * @param {Function} onDone Callback when timer finishes.\r\n     */\r\n    function startTimer(endTs, el, onDone) {\r\n        if (!el || !Number.isFinite(endTs)) {\r\n         return;\r\n        }\r\n        if (endTs <= now()) {\r\n            localStorage.removeItem(K.END);\r\n            localStorage.setItem(K.RUNNING, '0');\r\n            return;\r\n        }\r\n    clearTick();\r\n        const tick = () => {\r\n            const left = endTs - now();\r\n            if (left <= 0) {\r\n                clearTick();\r\n                el.textContent = '00:00';\r\n                localStorage.removeItem(K.END);\r\n                localStorage.setItem(K.RUNNING, '0');\r\n                sendMessage({type: 'stopped'});\r\n                if (onDone) {\r\n                    onDone();\r\n                }\r\n                return;\r\n            }\r\n            el.textContent = formatTime(left);\r\n        };\r\n        tick();\r\n        intervalId = setInterval(tick, 1000);\r\n    }\r\n    /**\r\n     * Stop the timer and reset the display.\r\n     * @param {HTMLElement} el The element to update with reset time.\r\n     * @param {boolean} play Whether to play the alarm sound.\r\n     */\r\n    function stopAndReset(el, play = false) {\r\n    clearTick();\r\n        localStorage.removeItem(K.END);\r\n        localStorage.setItem(K.RUNNING, '0');\r\n        sendMessage({type: 'stopped'});\r\n        if (el) {\r\n            el.textContent = '00:00';\r\n        }\r\n        if (play) {\r\n            alarm();\r\n        }\r\n    }\r\n    /**\r\n     * Start the wellness countdown and call the callback after completion.\r\n     * @param {Function} onAfter Callback to execute after wellness period ends.\r\n     */\r\n    function startWellness(onAfter) {\r\n        setPhase('wellness');\r\n        const dlg = $('wellness-modal');\r\n        const cd = $('wellness-countdown');\r\n        if (!cfg) {\r\n         return;\r\n        }\r\n        if (!dlg || !cd) {\r\n         onAfter(); return;\r\n        }\r\n        const end = now() + cfg.wellnessSec * 1000;\r\n        openDialog(dlg);\r\n        startTimer(end, cd, () => {\r\n            closeDialog(dlg);\r\n            onAfter();\r\n        });\r\n        const skip = $('skip-wellness');\r\n        if (skip) {\r\n            skip.type = 'button';\r\n            skip.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                closeDialog(dlg);\r\n                onAfter();\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Start a break timer and handle break modal UI.\r\n     * @param {HTMLElement} el The element to update with the break time.\r\n     * @param {number} ms Duration of the break in milliseconds.\r\n     * @param {string} kind Type of break ('short' or 'long').\r\n     */\r\n    function startBreak(el, ms, kind) {\r\n        setPhase('break', kind);\r\n        const dlg = $('break-modal');\r\n        const cd = $('break-countdown');\r\n        if (cd) {\r\n            cd.textContent = formatTime(ms);\r\n        }\r\n        openDialog(dlg);\r\n        const end = now() + ms;\r\n        startTimer(end, cd || el, () => {\r\n            alarm();\r\n            closeDialog(dlg);\r\n            stopAndReset(el, false);\r\n        });\r\n        const ok = $('dismiss-break');\r\n        if (ok) {\r\n            ok.type = 'button';\r\n            ok.onclick = (e) => {\r\n                e.preventDefault();\r\n                e.stopPropagation();\r\n                closeDialog(dlg);\r\n            };\r\n        }\r\n    }\r\n    /**\r\n     * Starts the focus timer.\r\n     * @param {HTMLElement} el The element to display the countdown.\r\n     * @param {number} ms Duration of the focus period in milliseconds.\r\n     */\r\n    function startFocus(el, ms) {\r\n\r\n        if (!cfg) {\r\n         return;\r\n        }\r\n        const focusDur = Number.isFinite(ms) && ms > 0 ? ms : 25 * 60 * 1000;\r\n        setPhase('focus');\r\n        const starttsSec = Math.floor(now() / 1000);\r\n        const end = now() + focusDur;\r\n        localStorage.setItem(K.END, String(end));\r\n        localStorage.setItem(K.RUNNING, '1');\r\n        sendMessage({type: 'start', end});\r\n        startTimer(end, el, () => {\r\n            ajax('block_pomodoro_increment_session', {courseid: cfg.courseid, startts: starttsSec})\r\n                .then((res) => {\r\n                    alarm();\r\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 1;\r\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\r\n                    const isLong = nextIsLongBreak(count, cfg.longbreakInterval);\r\n                    startBreak(el, isLong ? cfg.longbreakMs : cfg.shortbreakMs, isLong ? 'long' : 'short');\r\n                    return null;\r\n                })\r\n                .catch(Notification.exception);\r\n        });\r\n    }\r\n\r\n    // =====================\r\n    // State Storage & Inter-tab Communication\r\n    // =====================\r\n    /**\r\n     * Returns scoped localStorage key names for a given course.\r\n     * @param {number} courseid The course ID to scope keys.\r\n     */\r\n    function scoped(courseid) {\r\n        const cid = Number.isFinite(courseid) && courseid > 0 ? courseid : 'global';\r\n        const p = `pomodoro:${cid}`;\r\n        return {\r\n            END: `${p}:endTimestamp`,\r\n            RUNNING: `${p}:running`,\r\n            PHASE: `${p}:phase`,\r\n            BREAKKIND: `${p}:breakKind`,\r\n            MSG: `${p}:msg`,\r\n            CHANNEL: `${p}:channel`\r\n        };\r\n    }\r\n    /**\r\n     * Sets the current phase and optional break kind in localStorage.\r\n     * @param {string} p Phase name.\r\n     * @param {string} [k] Optional break kind.\r\n     */\r\n    function setPhase(p, k) {\r\n        localStorage.setItem(K.PHASE, p);\r\n        if (k) {\r\n         localStorage.setItem(K.BREAKKIND, k);\r\n        } else {\r\n         localStorage.removeItem(K.BREAKKIND);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the current phase from localStorage.\r\n     * @returns {string} The current phase name.\r\n     */\r\n    function getPhase() {\r\n        return localStorage.getItem(K.PHASE) || '';\r\n    }\r\n    /**\r\n     * Send a message to other tabs or via BroadcastChannel.\r\n     * @param {Object} msg The message object to send.\r\n     */\r\n    function sendMessage(msg) {\r\n        if (channel) {\r\n            channel.postMessage(msg);\r\n        } else {\r\n            localStorage.setItem(K.MSG, JSON.stringify(Object.assign({}, msg, {t: now()})));\r\n            setTimeout(function() {\r\n             localStorage.removeItem(K.MSG);\r\n            }, 50);\r\n        }\r\n    }\r\n    /**\r\n     * Handle incoming messages for timer synchronization.\r\n     * @param {Object} msg The message object.\r\n     * @param {HTMLElement} el The display element to update.\r\n     */\r\n    function handleMessage(msg, el) {\r\n        if (!msg) {\r\n         return;\r\n        }\r\n        if (msg.type === 'start' && msg.end) {\r\n            startTimer(Number(msg.end), el);\r\n            localStorage.setItem(K.END, String(msg.end));\r\n            localStorage.setItem(K.RUNNING, '1');\r\n            return;\r\n        }\r\n        if ((msg.type === 'stop' || msg.type === 'stopped') && localStorage.getItem(K.END)) {\r\n            stopAndReset(el, false);\r\n        }\r\n    }\r\n    /**\r\n     * Make an AJAX call using Moodle's core Ajax API.\r\n     * @param {string} name The web service method name.\r\n     * @param {Object} args Arguments for the web service call.\r\n     * @returns {Promise<any>} Promise resolving to the response.\r\n     */\r\n    function ajax(name, args) {\r\n        return Ajax.call([{methodname: name, args}])[0].catch(Notification.exception);\r\n    }\r\n\r\n    return {\r\n        init() {\r\n            const display = getTimerElement();\r\n            if (!display) {\r\n             return;\r\n            }\r\n                        cfg = getConfig(display);\r\n                        K = scoped(cfg.courseid);\r\n\r\n                        // UI: show interval number\r\n                        const intervalEl = $('pomodoro-interval');\r\n                        if (intervalEl) {\r\n             intervalEl.textContent = String(cfg.longbreakInterval);\r\n            }\r\n\r\n            // Broadcast channel\r\n            if (typeof BroadcastChannel !== 'undefined') {\r\n                channel = new BroadcastChannel(K.CHANNEL);\r\n                channel.onmessage = (e) => handleMessage(e.data, display);\r\n            }\r\n\r\n            // Initial tomatoes from server\r\n            ajax('block_pomodoro_get_status', {courseid: cfg.courseid})\r\n                .then((res) => {\r\n                    const count = res && typeof res.sessionscount === 'number' ? res.sessionscount : 0;\r\n                    renderTomatoes($('pomodoro-tomatoes'), count, cfg.longbreakInterval);\r\n                    return null;\r\n                })\r\n                .catch(Notification.exception);\r\n\r\n            // Resume (only if future)\r\n            const existingRaw = localStorage.getItem(K.END);\r\n            if (existingRaw !== null) {\r\n                const existing = Number(existingRaw);\r\n                const phase = getPhase();\r\n                let target;\r\n                if (phase === 'wellness') {\r\n                 target = $('wellness-countdown');\r\n                } else if (phase === 'break') {\r\n                 target = $('break-countdown');\r\n                } else {\r\n                 target = display;\r\n                }\r\n                                if (Number.isFinite(existing) && existing > now() + 250) {\r\n                                    if (phase === 'break') {\r\n                 openDialog($('break-modal'));\r\n                }\r\n                                    if (phase === 'wellness') {\r\n                 openDialog($('wellness-modal'));\r\n                }\r\n                    startTimer(existing, target || display);\r\n                } else {\r\n                    localStorage.removeItem(K.END);\r\n                    localStorage.setItem(K.RUNNING, '0');\r\n                }\r\n            }\r\n\r\n            // Storage sync for this course key\r\n            window.addEventListener('storage', (e) => {\r\n                if (e.key === K.END) {\r\n                    if (e.newValue !== null) {\r\n                        const val = Number(e.newValue);\r\n                        if (Number.isFinite(val) && val > now() + 250) {\r\n                            startTimer(val, display);\r\n                        } else {\r\n                            localStorage.removeItem(K.END);\r\n                            localStorage.setItem(K.RUNNING, '0');\r\n                        }\r\n                    } else {\r\n                        localStorage.setItem(K.RUNNING, '0');\r\n                    }\r\n                    return;\r\n                }\r\n                if (e.key === K.MSG && e.newValue) {\r\n                    try {\r\n                        handleMessage(JSON.parse(e.newValue), display);\r\n                    } catch (err) {}\r\n                }\r\n            });\r\n\r\n            const startBtn = $('start');\r\n            if (startBtn) {\r\n                startBtn.type = 'button';\r\n                startBtn.onclick = (e) => {\r\n                    alarm('click');\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    startWellness(() => startFocus(display, cfg.focusMs));\r\n                };\r\n            }\r\n            const stopBtn = $('stop');\r\n            if (stopBtn) {\r\n                stopBtn.type = 'button';\r\n                stopBtn.onclick = (e) => {\r\n                    alarm('click');\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    stopAndReset(display, false);\r\n                };\r\n            }\r\n\r\n            window.addEventListener('beforeunload', () => {\r\n                if (channel) {\r\n                    channel.close();\r\n                }\r\n            });\r\n        }\r\n    };\r\n});\r\n"],"names":["define","Ajax","Notification","cfg","K","channel","intervalId","clearTick","clearInterval","alarm","kind","soundUrl","M","wwwroot","audio","Audio","play","e","window","navigator","vibrate","$","id","document","getElementById","now","Date","readInt","v","d","n","parseInt","Number","isFinite","formatTime","ms","s","Math","max","floor","m","toString","padStart","r","renderTomatoes","el","sessionscount","interval","filled","innerHTML","Array","from","length","_","i","join","openDialog","showModal","closeDialog","open","close","startTimer","endTs","onDone","localStorage","removeItem","END","setItem","RUNNING","tick","left","textContent","sendMessage","type","setInterval","stopAndReset","startFocus","focusDur","setPhase","starttsSec","end","String","ajax","courseid","startts","then","res","count","longbreakInterval","isLong","c","dlg","cd","ok","onclick","preventDefault","stopPropagation","startBreak","longbreakMs","shortbreakMs","catch","exception","p","k","PHASE","BREAKKIND","msg","postMessage","MSG","JSON","stringify","Object","assign","t","setTimeout","handleMessage","getItem","name","args","call","methodname","init","display","timerDisplay","getAttribute","wellnessSec","focusMs","focusSec","NaN","focusMin","split","sbSec","lbSec","getConfig","cid","CHANNEL","scoped","intervalEl","BroadcastChannel","onmessage","data","existingRaw","existing","phase","target","addEventListener","key","newValue","parse","err","val","startBtn","onAfter","skip","startWellness","stopBtn"],"mappings":"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"}